
Prompt 1, Sample Number: 1:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(lst1, lst2):
    return list(set(lst1) & set(lst2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 2:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 3:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 4:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 5:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 6:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 7:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 8:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(a, b):
    return list(set(a) & set(b))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 9:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(a, b):
    return list(set(a) & set(b))
[/PYTHON]
================================================================================

Prompt 1, Sample Number: 10:
Model input: """
Write a function to find the shared elements from the given two lists.
assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
"""
Response:
 [PYTHON]
def similar_elements(a, b):
    return list(set(a) & set(b))
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 1:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 2:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    if n == 2:
        return False
    if n % 2 == 0:
        return True
    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 3:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 4:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 5:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    if n == 2:
        return False
    if n % 2 == 0:
        return True
    i = 3
    while i * i <= n:
        if n % i == 0:
            return True
        i += 2
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 6:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    if n == 2:
        return False
    if n % 2 == 0:
        return True
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 7:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n <= 1:
        return True
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 8:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 9:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 2, Sample Number: 10:
Model input: """
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
"""
Response:
 [PYTHON]
def is_not_prime(n):
    if n < 2:
        return True
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 1:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(nums, n):
    import heapq
    return sorted(heapq.nlargest(n, nums), reverse=True)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 2:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(lst, n):
    import heapq
    return heapq.nlargest(n, lst)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 3:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
import heapq

def heap_queue_largest(numbers, n):
    return heapq.nlargest(n, numbers)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 4:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(arr, n):
    import heapq
    return heapq.nlargest(n, arr)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 5:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
import heapq

def heap_queue_largest(nums, n):
    return heapq.nlargest(n, nums)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 6:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(nums, n):
    import heapq
    return heapq.nlargest(n, nums)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 7:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
import heapq

def heap_queue_largest(numbers, n):
    return sorted(heapq.nlargest(n, numbers), reverse=True)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 8:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
import heapq

def heap_queue_largest(nums, n):
    return heapq.nlargest(n, nums)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 9:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(numbers, n):
    from heapq import nlargest
    return nlargest(n, numbers)
[/PYTHON]
================================================================================

Prompt 3, Sample Number: 10:
Model input: """
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
"""
Response:
 [PYTHON]
def heap_queue_largest(lst, n):
    import heapq
    return heapq.nlargest(n, lst)
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 1:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    diff = a ^ b
    return diff != 0 and (diff & (diff - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 2:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    x = a ^ b
    return x != 0 and (x & (x - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 3:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    diff = a ^ b
    return diff != 0 and (diff & (diff - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 4:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    xor = a ^ b
    return xor != 0 and (xor & (xor - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 5:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    x = a ^ b
    return x != 0 and (x & (x - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 6:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    diff = a ^ b
    return diff != 0 and (diff & (diff - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 7:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    x = a ^ b
    return x != 0 and (x & (x - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 8:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    diff = a ^ b
    return diff != 0 and (diff & (diff - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 9:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    xor = a ^ b
    return xor != 0 and (xor & (xor - 1)) == 0
[/PYTHON]
================================================================================

Prompt 4, Sample Number: 10:
Model input: """
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
"""
Response:
 [PYTHON]
def differ_At_One_Bit_Pos(a, b):
    diff = a ^ b
    return diff != 0 and (diff & (diff - 1)) == 0
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 1:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 2:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 3:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 4:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 5:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(text):
    return [word for word in text.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 6:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 7:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 8:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 9:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(text):
    return [word for word in text.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 5, Sample Number: 10:
Model input: """
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
"""
Response:
 [PYTHON]
def find_char_long(s):
    return [word for word in s.split() if len(word) >= 4]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 1:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(lst):
    return [x**2 for x in lst]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 2:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(lst):
    return [x**2 for x in lst]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 3:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [x ** 2 for x in nums]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 4:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [x * x for x in nums]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 5:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [num ** 2 for num in nums]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 6:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [num ** 2 for num in nums]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 7:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(lst):
    return [x ** 2 for x in lst]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 8:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(lst):
    return [x**2 for x in lst]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 9:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [x ** 2 for x in nums]
[/PYTHON]
================================================================================

Prompt 6, Sample Number: 10:
Model input: """
Write a function to find squares of individual elements in a list.
assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
"""
Response:
 [PYTHON]
def square_nums(nums):
    return [num ** 2 for num in nums]
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 1:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for i in range(1, n + 1):
        if s == s[i:] + s[:i]:
            return i
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 2:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for i in range(1, n + 1):
        if s[i:] + s[:i] == s:
            return i
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 3:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s: str) -> int:
    n = len(s)
    for k in range(1, n + 1):
        if s[k:] + s[:k] == s:
            return k
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 4:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for r in range(1, n + 1):
        if s[r:] + s[:r] == s:
            return r
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 5:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    if n == 0:
        return 0
    rotations = 1
    rotated = s[1:] + s[0]
    while rotated != s:
        rotations += 1
        rotated = rotated[1:] + rotated[0]
    return rotations
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 6:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    if n == 0:
        return 0
    pi = [0] * n
    for i in range(1, n):
        j = pi[i - 1]
        while j > 0 and s[i] != s[j]:
            j = pi[j - 1]
        if s[i] == s[j]:
            j += 1
        pi[i] = j
    candidate = n - pi[-1]
    if n % candidate == 0:
        return candidate
    return n
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 7:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for k in range(1, n+1):
        if s == s[k:] + s[:k]:
            return k
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 8:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for k in range(1, n + 1):
        if s == s[k:] + s[:k]:
            return k
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 9:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for i in range(1, n + 1):
        if s == s[i:] + s[:i]:
            return i
[/PYTHON]
================================================================================

Prompt 7, Sample Number: 10:
Model input: """
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations("aaaa") == 1
"""
Response:
 [PYTHON]
def find_Rotations(s):
    n = len(s)
    for i in range(1, n + 1):
        if s[i:] + s[:i] == s:
            return i
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 1:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first = s.find(ch)
    if first == -1:
        return s
    last = s.rfind(ch)
    # If there's only one occurrence
    if first == last:
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 2:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, char):
    first = s.find(char)
    if first == -1:
        return s
    last = s.rfind(char)
    if first == last:
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 3:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first_index = s.find(ch)
    if first_index == -1:
        return s
    last_index = s.rfind(ch)
    # If first and last occurrence are the same, remove it once.
    if first_index == last_index:
        return s[:first_index] + s[first_index+1:]
    # Remove the last occurrence first to avoid messing up the first occurrence index.
    s = s[:last_index] + s[last_index+1:]
    s = s[:first_index] + s[first_index+1:]
    return s
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 4:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first_index = s.find(ch)
    if first_index == -1:
        return s
    last_index = s.rfind(ch)
    if first_index == last_index:
        return s[:first_index] + s[first_index+1:]
    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 5:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, char):
    first_index = s.find(char)
    # If character not found, return original string.
    if first_index == -1:
        return s
    last_index = s.rfind(char)
    # If there's only one occurrence.
    if first_index == last_index:
        return s[:first_index] + s[first_index+1:]
    # Remove the last occurrence first to avoid index shifting.
    s = s[:last_index] + s[last_index+1:]
    s = s[:first_index] + s[first_index+1:]
    return s
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 6:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first = s.find(ch)
    if first == -1:
        return s
    last = s.rfind(ch)
    # if only one occurrence, remove it once
    if first == last:
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 7:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first = s.find(ch)
    if first == -1:
        return s
    last = s.rfind(ch)
    if first == last:  # only one occurrence
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 8:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, char):
    first = s.find(char)
    last = s.rfind(char)
    if first == -1:
        return s
    if first == last:
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 9:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, ch):
    first_index = s.find(ch)
    if first_index == -1:
        return s
    last_index = s.rfind(ch)
    if first_index == last_index:
        return s[:first_index] + s[first_index+1:]
    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]
[/PYTHON]
================================================================================

Prompt 8, Sample Number: 10:
Model input: """
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ("hello","l") == "heo"
"""
Response:
 [PYTHON]
def remove_Occ(s, c):
    first = s.find(c)
    if first == -1:
        return s
    last = s.rfind(c)
    if first == last:
        return s[:first] + s[first+1:]
    return s[:first] + s[first+1:last] + s[last+1:]
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 1:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 2:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 3:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 4:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=lambda row: sum(row))
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 5:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 6:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 7:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 8:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 9:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 9, Sample Number: 10:
Model input: """
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
"""
Response:
 [PYTHON]
def sort_matrix(matrix):
    return sorted(matrix, key=sum)
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 1:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 2:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return (base * height / 2) * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 3:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(length, base, height):
    return length * (base * height / 2)
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 4:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(a, b, c):
    return 0.5 * a * b * c
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 5:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(a, b, c):
    return (a * b * c) / 2
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 6:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 7:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 8:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 9:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 10, Sample Number: 10:
Model input: """
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
"""
Response:
 [PYTHON]
def find_Volume(base, height, length):
    return 0.5 * base * height * length
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 1:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r"[a-z]+(?:_[a-z]+)+", s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 2:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r'[a-z]+(?:_[a-z]+)+', s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 3:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r"[a-z]+_[a-z]+", s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 4:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r"[a-z]+_[a-z]+", s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 5:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r'[a-z]+_[a-z]+', s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 6:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
def text_lowercase_underscore(s):
    import re
    return bool(re.fullmatch(r'[a-z]+(?:_[a-z]+)+', s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 7:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r'[a-z]+_[a-z]+', s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 8:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r'[a-z]+(?:_[a-z]+)+', s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 9:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r"[a-z]+(_[a-z]+)*", s))
[/PYTHON]
================================================================================

Prompt 11, Sample Number: 10:
Model input: """
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""
Response:
 [PYTHON]
import re

def text_lowercase_underscore(s):
    return bool(re.fullmatch(r'[a-z]+(?:_[a-z]+)+', s))
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 1:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 2:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 3:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 4:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 5:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 6:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 7:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 8:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 9:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return side * 4
[/PYTHON]
================================================================================

Prompt 12, Sample Number: 10:
Model input: """
Write a function that returns the perimeter of a square given its side length as input.
assert square_perimeter(10)==40
"""
Response:
 [PYTHON]
def square_perimeter(side):
    return 4 * side
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 1:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(first, second):
    remove_set = set(second)
    return ''.join(char for char in first if char not in remove_set)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 2:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s, dirty):
    return ''.join(c for c in s if c not in dirty)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 3:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s, dirty):
    dirty_set = set(dirty)
    return ''.join(c for c in s if c not in dirty_set)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 4:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s, t):
    dirty = set(t)
    return ''.join(c for c in s if c not in dirty)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 5:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s1, s2):
    return ''.join(c for c in s1 if c not in s2)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 6:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s1, s2):
    remove_set = set(s2)
    return ''.join(char for char in s1 if char not in remove_set)
    
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 7:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s1: str, s2: str) -> str:
    remove_set = set(s2)
    return ''.join(ch for ch in s1 if ch not in remove_set)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 8:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s, remove):
    remove_set = set(remove)
    return ''.join(char for char in s if char not in remove_set)
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 9:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s, dirty):
    return ''.join(ch for ch in s if ch not in dirty)
    
[/PYTHON]
================================================================================

Prompt 13, Sample Number: 10:
Model input: """
Write a function to remove characters from the first string which are present in the second string.
assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
"""
Response:
 [PYTHON]
def remove_dirty_chars(s1, s2):
    remove_set = set(s2)
    return ''.join(c for c in s1 if c not in remove_set)
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 1:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 2:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 3:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(nums):
    return len(nums) != len(set(nums))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 4:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 5:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(nums):
    return len(nums) != len(set(nums))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 6:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 7:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(nums):
    return len(nums) != len(set(nums))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 8:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 9:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 14, Sample Number: 10:
Model input: """
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
"""
Response:
 [PYTHON]
def test_duplicate(arr):
    return len(arr) != len(set(arr))
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 1:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(n):
    k = 1
    while True:
        woodall = k * (2 ** k) - 1
        if woodall == n:
            return True
        if woodall > n:
            return False
        k += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 2:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(n):
    k = 1
    while True:
        woodall = k * 2**k - 1
        if woodall == n:
            return True
        if woodall > n:
            return False
        k += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 3:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    n = 1
    while True:
        woodall = n * (2 ** n) - 1
        if woodall == num:
            return True
        if woodall > num:
            return False
        n += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 4:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    if num < 1:
        return False
    i = 1
    while True:
        woodall = i * (2 ** i) - 1
        if woodall == num:
            return True
        if woodall > num:
            return False
        i += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 5:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    n = 1
    while True:
        woodall = n * (2 ** n) - 1
        if woodall == num:
            return True
        if woodall > num:
            return False
        n += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 6:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    if num < 1:
        return False
    n = 1
    while True:
        woodall = n * (2 ** n) - 1
        if woodall == num:
            return True
        if woodall > num:
            return False
        n += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 7:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(n):
    k = 1
    while True:
        woodall = k * (2 ** k) - 1
        if woodall == n:
            return True
        if woodall > n:
            return False
        k += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 8:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(n):
    i = 1
    while True:
        wood = i * (2 ** i) - 1
        if wood == n:
            return True
        if wood > n:
            return False
        i += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 9:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    n = 1
    while True:
        wood = n * (2 ** n) - 1
        if wood == num:
            return True
        if wood > num:
            return False
        n += 1
[/PYTHON]
================================================================================

Prompt 15, Sample Number: 10:
Model input: """
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
"""
Response:
 [PYTHON]
def is_woodall(num):
    if num < 1:
        return False
    n = 1
    while True:
        woodall = n * (2 ** n) - 1
        if woodall == num:
            return True
        if woodall > num:
            return False
        n += 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 1:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    r = int(str(n)[::-1])
    return n == 2 * r - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 2:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 3:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(num):
    rev = int(str(num)[::-1])
    return num == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 4:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 5:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 6:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 7:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 8:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(num):
    rev = int(str(num)[::-1])
    return num == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 9:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev_n = int(str(n)[::-1])
    return n == 2 * rev_n - 1
[/PYTHON]
================================================================================

Prompt 16, Sample Number: 10:
Model input: """
Write a python function to check if a given number is one less than twice its reverse.
assert check(70) == False
"""
Response:
 [PYTHON]
def check(n):
    rev = int(str(n)[::-1])
    return n == 2 * rev - 1
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 1:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(map(str, sorted(digits, reverse=True))))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 2:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(map(str, sorted(digits, reverse=True))))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 3:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int("".join(sorted(map(str, digits), reverse=True)))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 4:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(str(d) for d in sorted(digits, reverse=True)))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 5:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(str(d) for d in sorted(digits, reverse=True)))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 6:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(sorted(map(str, digits), reverse=True)))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 7:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    sorted_digits = sorted(digits, reverse=True)
    return int("".join(map(str, sorted_digits)))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 8:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(map(str, sorted(digits, reverse=True))))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 9:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(map(str, sorted(digits, reverse=True))))
[/PYTHON]
================================================================================

Prompt 17, Sample Number: 10:
Model input: """
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
"""
Response:
 [PYTHON]
def find_Max_Num(digits):
    return int(''.join(sorted(map(str, digits), reverse=True)))
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 1:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(x, y):
    return x * y < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 2:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(a, b):
    return a * b < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 3:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(a, b):
    return (a ^ b) < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 4:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(x, y):
    return (x < 0 and y > 0) or (x > 0 and y < 0)
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 5:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(x, y):
    return x * y < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 6:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(a, b):
    return a * b < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 7:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(x, y):
    return (x < 0) != (y < 0)
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 8:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(a, b):
    return a * b < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 9:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(x, y):
    return x * y < 0
[/PYTHON]
================================================================================

Prompt 18, Sample Number: 10:
Model input: """
Write a python function to check whether the given two integers have opposite sign or not.
assert opposite_Signs(1,-2) == True
"""
Response:
 [PYTHON]
def opposite_Signs(a, b):
    return a * b < 0
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 1:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n ** 2 - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 2:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 3:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n ** 2 - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 4:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 5:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 6:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 7:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 8:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 9:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return 3 * n * n - 2 * n
[/PYTHON]
================================================================================

Prompt 19, Sample Number: 10:
Model input: """
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
"""
Response:
 [PYTHON]
def is_octagonal(n):
    return n * (3 * n - 2)
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 1:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    freq = {0: 1}
    cur_sum = 0
    result = 0
    for i, ch in enumerate(s, 1):
        cur_sum += int(ch)
        key = cur_sum - i
        result += freq.get(key, 0)
        freq[key] = freq.get(key, 0) + 1
    return result
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 2:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    n = len(s)
    for i in range(n):
        current_sum = 0
        for j in range(i, n):
            current_sum += int(s[j])
            if current_sum == j - i + 1:
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 3:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    n = len(s)
    for i in range(n):
        curr_sum = 0
        for j in range(i, n):
            curr_sum += int(s[j])
            if curr_sum == (j - i + 1):
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 4:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    n = len(s)
    for i in range(n):
        total = 0
        for j in range(i, n):
            total += int(s[j])
            if total == j - i + 1:
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 5:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    diff_counts = {}
    diff = 0
    diff_counts[diff] = 1
    cur_sum = 0
    for i, ch in enumerate(s, 1):
        cur_sum += int(ch)
        diff = cur_sum - i
        count += diff_counts.get(diff, 0)
        diff_counts[diff] = diff_counts.get(diff, 0) + 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 6:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    freq = {0: 1}
    prefix_sum = 0
    for i, ch in enumerate(s, start=1):
        prefix_sum += int(ch)
        key = prefix_sum - i
        count += freq.get(key, 0)
        freq[key] = freq.get(key, 0) + 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 7:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s: str) -> int:
    count = 0
    n = len(s)
    for i in range(n):
        total = 0
        for j in range(i, n):
            total += int(s[j])
            if total == (j - i + 1):
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 8:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    n = len(s)
    for i in range(n):
        sum_digits = 0
        for j in range(i, n):
            sum_digits += int(s[j])
            if sum_digits == (j - i + 1):
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 9:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    prefix = 0
    freq = {0: 1}
    count = 0
    for ch in s:
        prefix += int(ch) - 1
        count += freq.get(prefix, 0)
        freq[prefix] = freq.get(prefix, 0) + 1
    return count
[/PYTHON]
================================================================================

Prompt 20, Sample Number: 10:
Model input: """
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
"""
Response:
 [PYTHON]
def count_Substrings(s):
    count = 0
    n = len(s)
    for i in range(n):
        curr_sum = 0
        for j in range(i, n):
            curr_sum += int(s[j])
            if curr_sum == (j - i + 1):
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 1:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 2:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 3:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 4:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 5:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 6:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 7:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(numbers):
    smallest = numbers[0]
    for number in numbers:
        if number < smallest:
            smallest = number
    return smallest
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 8:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 9:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(lst):
    return min(lst)
[/PYTHON]
================================================================================

Prompt 21, Sample Number: 10:
Model input: """
Write a python function to find smallest number in a list.
assert smallest_num([10, 20, 1, 45, 99]) == 1
"""
Response:
 [PYTHON]
def smallest_num(numbers):
    return min(numbers)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 1:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(tuple_list):
    return max(abs(a - b) for a, b in tuple_list)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 2:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pair_list):
    return max(abs(a - b) for a, b in pair_list)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 3:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pairs):
    return max(abs(a - b) for a, b in pairs)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 4:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pair_list):
    return max(abs(a - b) for a, b in pair_list)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 5:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pairs):
    max_diff = 0
    for a, b in pairs:
        diff = abs(a - b)
        if diff > max_diff:
            max_diff = diff
    return max_diff
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 6:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pair_list):
    return max(abs(a - b) for a, b in pair_list)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 7:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pairs):
    return max(abs(a - b) for a, b in pairs)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 8:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(pairs):
    return max(abs(a - b) for a, b in pairs)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 9:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(tuple_list):
    return max(abs(a - b) for a, b in tuple_list)
[/PYTHON]
================================================================================

Prompt 22, Sample Number: 10:
Model input: """
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
"""
Response:
 [PYTHON]
def max_difference(tuple_list):
    return max(abs(a - b) for a, b in tuple_list)
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 1:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 2:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(tuples_list):
    return sorted(tuples_list, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 3:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 4:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 5:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(tuples):
    return sorted(tuples, key=lambda tup: tup[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 6:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(tuples_list):
    return sorted(tuples_list, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 7:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(tuples):
    return sorted(tuples, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 8:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 9:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 23, Sample Number: 10:
Model input: """
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
"""
Response:
 [PYTHON]
def subject_marks(marks):
    return sorted(marks, key=lambda x: x[1])
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 1:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 2:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 3:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, (list, tuple)):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 4:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 5:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 6:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 7:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 8:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 9:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for item in lst:
        if isinstance(item, list):
            total += recursive_list_sum(item)
        else:
            total += item
    return total
[/PYTHON]
================================================================================

Prompt 24, Sample Number: 10:
Model input: """
Write a function to flatten a list and sum all of its elements.
assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
"""
Response:
 [PYTHON]
def recursive_list_sum(lst):
    total = 0
    for elem in lst:
        if isinstance(elem, list):
            total += recursive_list_sum(elem)
        else:
            total += elem
    return total
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 1:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for x in lst if x > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 2:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for x in lst if x > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 3:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for num in lst if num > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 4:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for num in lst if num > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 5:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for x in lst if x > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 6:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for num in lst if num > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 7:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for x in lst if x > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 8:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    count = 0
    for num in lst:
        if num > 0:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 9:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(lst):
    return sum(1 for x in lst if x > 0)
[/PYTHON]
================================================================================

Prompt 25, Sample Number: 10:
Model input: """
Write a python function to count the number of positive numbers in a list.
assert pos_count([1,-2,3,-4]) == 2
"""
Response:
 [PYTHON]
def pos_count(numbers):
    return sum(1 for num in numbers if num > 0)
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 1:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n: int) -> int:
    bell = [0] * (n + 1)
    bell[0] = 1
    for i in range(1, n + 1):
        bell[i] = 0
        for j in range(i):
            # Using the recurrence: Bell(i) = sum(binomial(i-1, j) * Bell(j))
            # Compute binomial coefficient C(i-1, j)
            # iterative multiplier method
            binom = 1
            for k in range(1, j+1):
                binom = binom * (i - 1 - k + 1) // k
            bell[i] += binom * bell[j]
    return bell[n]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 2:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    import math
    bell = [1]
    for i in range(1, n + 1):
        total = 0
        for k in range(i):
            total += math.comb(i - 1, k) * bell[k]
        bell.append(total)
    return bell[n]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 3:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    if n == 0:
        return 1
    bell = [1]
    for i in range(1, n + 1):
        new_row = [bell[-1]]
        for j in range(1, i + 1):
            new_row.append(new_row[j - 1] + bell[j - 1])
        bell = new_row
    return bell[0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 4:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    from math import comb
    dp = [1]
    for i in range(1, n + 1):
        total = 0
        for k in range(i):
            total += comb(i - 1, k) * dp[k]
        dp.append(total)
    return dp[n]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 5:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    if n < 0:
        raise ValueError("n must be non-negative")
    row = [1]
    for i in range(1, n + 1):
        new_row = [row[-1]]
        for j in range(1, i + 1):
            new_row.append(new_row[j - 1] + row[j - 1])
        row = new_row
    return row[0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 6:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    if n == 0:
        return 1
    bell = [[0]*(n+1) for _ in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]
    return bell[n][0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 7:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    triangle = [[1]]
    for i in range(1, n + 1):
        row = [triangle[i - 1][-1]]
        for j in range(1, i + 1):
            row.append(row[-1] + triangle[i - 1][j - 1])
        triangle.append(row)
    return triangle[n][0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 8:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    if n == 0:
        return 1
    triangle = [[1]]
    for i in range(1, n + 1):
        row = [triangle[i - 1][-1]]
        for j in range(1, i + 1):
            row.append(row[j - 1] + triangle[i - 1][j - 1])
        triangle.append(row)
    return triangle[n][0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 9:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    if n == 0:
        return 1
    triangle = [[1]]
    for i in range(1, n + 1):
        row = [triangle[i - 1][-1]]
        for j in range(1, i + 1):
            row.append(row[-1] + triangle[i - 1][j - 1])
        triangle.append(row)
    return triangle[n][0]
[/PYTHON]
================================================================================

Prompt 26, Sample Number: 10:
Model input: """
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
"""
Response:
 [PYTHON]
def bell_number(n):
    row = [1]
    for i in range(1, n + 1):
        new_row = [row[-1]]
        for j in range(i):
            new_row.append(new_row[-1] + row[j])
        row = new_row
    return row[0]
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 1:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    increasing = decreasing = True
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            decreasing = False
        if arr[i] < arr[i - 1]:
            increasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 2:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(array):
    increasing = decreasing = True
    for i in range(1, len(array)):
        if array[i] > array[i-1]:
            decreasing = False
        if array[i] < array[i-1]:
            increasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 3:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(array):
    increasing = True
    decreasing = True
    for i in range(1, len(array)):
        if array[i] > array[i - 1]:
            decreasing = False
        if array[i] < array[i - 1]:
            increasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 4:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 5:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    if not arr:
        return True
    increasing = True
    decreasing = True
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            decreasing = False
        if arr[i] < arr[i - 1]:
            increasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 6:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    if len(arr) < 2:
        return True
    increasing = True
    decreasing = True
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            decreasing = False
        if arr[i] < arr[i - 1]:
            increasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 7:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    if len(arr) < 2:
        return True
    inc = all(arr[i] <= arr[i+1] for i in range(len(arr) - 1))
    dec = all(arr[i] >= arr[i+1] for i in range(len(arr) - 1))
    return inc or dec
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 8:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    return all(arr[i] <= arr[i+1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i+1] for i in range(len(arr) - 1))
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 9:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    increasing = True
    decreasing = True
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            increasing = False
        if arr[i] > arr[i - 1]:
            decreasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 27, Sample Number: 10:
Model input: """
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
"""
Response:
 [PYTHON]
def is_Monotonic(arr):
    increasing = decreasing = True
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            increasing = False
        if arr[i] > arr[i - 1]:
            decreasing = False
    return increasing or decreasing
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 1:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sublst):
    n, m = len(lst), len(sublst)
    if m == 0:
        return True
    for i in range(n - m + 1):
        if lst[i:i + m] == sublst:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 2:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sublist):
    n, m = len(lst), len(sublist)
    for i in range(n - m + 1):
        if lst[i:i + m] == sublist:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 3:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    if not sub:
        return True
    for i in range(len(lst) - len(sub) + 1):
        if lst[i:i+len(sub)] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 4:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    if not sub:
        return True
    for i in range(len(lst) - len(sub) + 1):
        if lst[i:i + len(sub)] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 5:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    if not sub:
        return True
    n, m = len(lst), len(sub)
    for i in range(n - m + 1):
        if lst[i:i+m] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 6:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    if not sub:
        return True
    sub_len = len(sub)
    for i in range(len(lst) - sub_len + 1):
        if lst[i:i + sub_len] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 7:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    if not sub:
        return True
    n = len(sub)
    for i in range(len(lst) - n + 1):
        if lst[i:i+n] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 8:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sublist):
    if not sublist:
        return True
    sub_len = len(sublist)
    for i in range(len(lst) - sub_len + 1):
        if lst[i:i + sub_len] == sublist:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 9:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    n, m = len(lst), len(sub)
    if m == 0:
        return True  # assuming empty list is always a sublist
    for i in range(n - m + 1):
        if lst[i:i+m] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 28, Sample Number: 10:
Model input: """
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
"""
Response:
 [PYTHON]
def is_sublist(lst, sub):
    n = len(sub)
    if n == 0:
        return True
    for i in range(len(lst) - n + 1):
        if lst[i:i+n] == sub:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 1:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    return len({len(t) for t in tuples}) <= 1
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 2:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    length = len(tuples[0])
    return all(len(t) == length for t in tuples)
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 3:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    first_length = len(tuples[0])
    for t in tuples:
        if len(t) != first_length:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 4:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    length = len(tuples[0])
    for tup in tuples:
        if len(tup) != length:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 5:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    first_length = len(tuples[0])
    return all(len(t) == first_length for t in tuples)
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 6:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    first_length = len(tuples[0])
    for t in tuples:
        if len(t) != first_length:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 7:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples_list):
    if not tuples_list:
        return True
    first_length = len(tuples_list[0])
    for tup in tuples_list:
        if len(tup) != first_length:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 8:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples):
    if not tuples:
        return True
    first_len = len(tuples[0])
    return all(len(t) == first_len for t in tuples)
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 9:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples_list):
    if not tuples_list:
        return True
    first_length = len(tuples_list[0])
    for tup in tuples_list:
        if len(tup) != first_length:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 29, Sample Number: 10:
Model input: """
Write a function to find whether all the given tuples have equal length or not.
assert get_equal([(11, 22, 33), (44, 55, 66)]) == True
"""
Response:
 [PYTHON]
def get_equal(tuples_list):
    if not tuples_list:
        return True
    first_length = len(tuples_list[0])
    return all(len(t) == first_length for t in tuples_list)
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 1:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 2:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    swapped = True
    # Make a copy of list to avoid modifying original list if needed
    sorted_lst = lst[:]
    
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
            
        swapped = False
        
        for i in range(n - gap):
            if sorted_lst[i] > sorted_lst[i + gap]:
                sorted_lst[i], sorted_lst[i + gap] = sorted_lst[i + gap], sorted_lst[i]
                swapped = True
                
    return sorted_lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 3:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    gap = len(lst)
    shrink_factor = 1.3
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / shrink_factor)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(len(lst) - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 4:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 5:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 6:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    sorted_flag = False
    while not sorted_flag:
        gap = int(gap / shrink)
        if gap <= 1:
            gap = 1
            sorted_flag = True
        for i in range(n - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                sorted_flag = False
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 7:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(arr):
    n = len(arr)
    gap = n
    shrink = 1.3
    sorted_flag = False

    while not sorted_flag or gap > 1:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        sorted_flag = True
        for i in range(n - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                sorted_flag = False
    return arr
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 8:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    gap = len(lst)
    shrink = 1.3
    swapped = True

    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        
        swapped = False

        for i in range(len(lst) - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True

    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 9:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    gap = len(lst)
    shrink = 1.3
    sorted_flag = False
    while not sorted_flag:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        sorted_flag = True
        for i in range(len(lst) - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                sorted_flag = False
    return lst
[/PYTHON]
================================================================================

Prompt 30, Sample Number: 10:
Model input: """
Write a function to sort a list of elements.
assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
"""
Response:
 [PYTHON]
def comb_sort(lst):
    n = len(lst)
    gap = n
    shrink = 1.3
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                swapped = True
    return lst
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 1:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 2 == 1 or n % 4 == 0
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 2:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 3:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 4:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 5:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 6:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n: int) -> bool:
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 7:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[PYTHON]
================================================================================

Prompt 31, Sample Number: 8:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 9:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 31, Sample Number: 10:
Model input: """
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
"""
Response:
 [PYTHON]
def dif_Square(n):
    return n % 4 != 2
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 1:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(strings, patterns):
    if len(strings) != len(patterns):
        return False
    
    mapping_str_to_pat = {}
    mapping_pat_to_str = {}
    
    for s, p in zip(strings, patterns):
        if s in mapping_str_to_pat:
            if mapping_str_to_pat[s] != p:
                return False
        else:
            mapping_str_to_pat[s] = p
            
        if p in mapping_pat_to_str:
            if mapping_pat_to_str[p] != s:
                return False
        else:
            mapping_pat_to_str[p] = s
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 2:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(sequence, patterns):
    if len(sequence) != len(patterns):
        return False
    mapping = {}
    reverse_mapping = {}
    for word, pat in zip(sequence, patterns):
        if pat in mapping:
            if mapping[pat] != word:
                return False
        else:
            if word in reverse_mapping:
                return False
            mapping[pat] = word
            reverse_mapping[word] = pat
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 3:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(values, patterns):
    if len(values) != len(patterns):
        return False
    mapping = {}
    used = set()
    for val, pat in zip(values, patterns):
        if pat in mapping:
            if mapping[pat] != val:
                return False
        else:
            if val in used:
                return False
            mapping[pat] = val
            used.add(val)
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 4:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(words, patterns):
    if len(words) != len(patterns):
        return False
    mapping = {}
    reverse_mapping = {}
    for word, pattern in zip(words, patterns):
        if pattern in mapping:
            if mapping[pattern] != word:
                return False
        else:
            if word in reverse_mapping:
                return False
            mapping[pattern] = word
            reverse_mapping[word] = pattern
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 5:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(words, patterns):
    if len(words) != len(patterns):
        return False
    map_pattern_to_word = {}
    map_word_to_pattern = {}
    for word, pat in zip(words, patterns):
        if pat in map_pattern_to_word:
            if map_pattern_to_word[pat] != word:
                return False
        else:
            map_pattern_to_word[pat] = word
        if word in map_word_to_pattern:
            if map_word_to_pattern[word] != pat:
                return False
        else:
            map_word_to_pattern[word] = pat
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 6:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(values, patterns):
    if len(values) != len(patterns):
        return False
    pattern_map = {}
    value_map = {}
    for value, pattern in zip(values, patterns):
        if pattern in pattern_map:
            if pattern_map[pattern] != value:
                return False
        else:
            pattern_map[pattern] = value
        if value in value_map:
            if value_map[value] != pattern:
                return False
        else:
            value_map[value] = pattern
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 7:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(words, patterns):
    if len(words) != len(patterns):
        return False
    pat_to_word = {}
    word_to_pat = {}
    for word, pat in zip(words, patterns):
        if pat in pat_to_word:
            if pat_to_word[pat] != word:
                return False
        else:
            pat_to_word[pat] = word
        if word in word_to_pat:
            if word_to_pat[word] != pat:
                return False
        else:
            word_to_pat[word] = pat
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 8:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(lst, patterns):
    if len(lst) != len(patterns):
        return False
    mapping = {}
    reverse_mapping = {}
    for value, pattern in zip(lst, patterns):
        if pattern in mapping:
            if mapping[pattern] != value:
                return False
        else:
            mapping[pattern] = value
        if value in reverse_mapping:
            if reverse_mapping[value] != pattern:
                return False
        else:
            reverse_mapping[value] = pattern
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 9:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(seq, patterns):
    if len(seq) != len(patterns):
        return False
    mapping = {}
    reverse_mapping = {}
    for value, pattern in zip(seq, patterns):
        if pattern in mapping and mapping[pattern] != value:
            return False
        if value in reverse_mapping and reverse_mapping[value] != pattern:
            return False
        mapping[pattern] = value
        reverse_mapping[value] = pattern
    return True
[/PYTHON]
================================================================================

Prompt 32, Sample Number: 10:
Model input: """
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True
"""
Response:
 [PYTHON]
def is_samepatterns(colors, patterns):
    if len(colors) != len(patterns):
        return False
    mapping = {}
    reverse_mapping = {}
    for color, pat in zip(colors, patterns):
        if pat in mapping and mapping[pat] != color:
            return False
        if color in reverse_mapping and reverse_mapping[color] != pat:
            return False
        mapping[pat] = color
        reverse_mapping[color] = pat
    return True
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 1:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [t for t in tuples_list if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 2:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(lst, k):
    return [t for t in lst if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 3:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [t for t in tuples_list if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 4:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [t for t in tuples_list if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 5:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(lst, k):
    return [tup for tup in lst if all(x % k == 0 for x in tup)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 6:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [t for t in tuples_list if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 7:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [tup for tup in tuples_list if all(x % k == 0 for x in tup)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 8:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(lst, k):
    return [t for t in lst if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 9:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(lst, k):
    return [t for t in lst if all(x % k == 0 for x in t)]
    
[/PYTHON]
================================================================================

Prompt 33, Sample Number: 10:
Model input: """
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""
Response:
 [PYTHON]
def find_tuples(tuples_list, k):
    return [t for t in tuples_list if all(x % k == 0 for x in t)]
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 1:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 2:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 3:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 4:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 5:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 6:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 7:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 8:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 9:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 34, Sample Number: 10:
Model input: """
Write a python function to find whether a number is divisible by 11.
assert is_Diff (12345) == False
"""
Response:
 [PYTHON]
def is_Diff(n):
    return n % 11 == 0
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 1:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 != 0
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 2:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 3:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 4:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 5:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 6:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 7:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 8:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 9:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 != 0
[/PYTHON]
================================================================================

Prompt 35, Sample Number: 10:
Model input: """
Write a python function to check whether the length of the word is odd or not.
assert word_len("Hadoop") == False
"""
Response:
 [PYTHON]
def word_len(word):
    return len(word) % 2 == 1
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 1:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 2:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 3:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 4:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return (n * (n + 1) * (n + 2)) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 5:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 6:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 7:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 8:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 9:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 36, Sample Number: 10:
Model input: """
Write a function to find the nth tetrahedral number.
assert tetrahedral_number(5) == 35
"""
Response:
 [PYTHON]
def tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 1:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return (4/3) * math.pi * r**3
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 2:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return (4/3) * math.pi * r**3
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 3:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(radius):
    return (4/3) * math.pi * (radius ** 3)
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 4:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return (4/3) * math.pi * r**3
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 5:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return (4/3) * math.pi * (r ** 3)
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 6:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(radius):
    return (4/3) * math.pi * radius ** 3
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 7:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(radius):
    return (4/3) * math.pi * (radius ** 3)
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 8:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return 4/3 * math.pi * r**3
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 9:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(r):
    return (4/3) * math.pi * (r ** 3)
[/PYTHON]
================================================================================

Prompt 37, Sample Number: 10:
Model input: """
Write a function to find the volume of a sphere.
assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def volume_sphere(radius):
    return (4/3) * math.pi * radius**3
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 1:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 1
    for i in range(3, n + 1):
        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]
    return dp[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 2:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    seq = [0] * (n + 1)
    seq[1] = 1
    seq[2] = 1
    for i in range(3, n + 1):
        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]
    return seq[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 3:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n <= 2:
        return 1
    a = [0] * (n + 1)
    a[1], a[2] = 1, 1
    for i in range(3, n + 1):
        a[i] = a[a[i - 1]] + a[i - a[i - 1]]
    return a[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 4:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    seq = [0] * (n + 1)
    seq[1], seq[2] = 1, 1
    for i in range(3, n + 1):
        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]
    return seq[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 5:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 1
    for i in range(3, n + 1):
        dp[i] = dp[dp[i - 1]] + dp[i + 1 - dp[i - 1]]
    return dp[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 6:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    dp = [0] * (n + 1)
    dp[1], dp[2] = 1, 1
    for i in range(3, n + 1):
        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]
    return dp[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 7:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    seq = [0] * (n + 1)
    seq[1], seq[2] = 1, 1
    for i in range(3, n + 1):
        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]
    return seq[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 8:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    seq = [0] * (n + 1)
    seq[1], seq[2] = 1, 1
    for i in range(3, n + 1):
        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]
    return seq[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 9:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n == 0:
        return 0
    a = [0] * (n + 1)
    a[1] = 1
    if n >= 2:
        a[2] = 1
    for i in range(3, n + 1):
        a[i] = a[a[i - 1]] + a[i - a[i - 1]]
    return a[n]
[/PYTHON]
================================================================================

Prompt 38, Sample Number: 10:
Model input: """
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
"""
Response:
 [PYTHON]
def sequence(n):
    if n <= 2:
        return 1
    seq = [0, 1, 1]
    for i in range(3, n + 1):
        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])
    return seq[n]
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 1:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(radius):
    return 4 * math.pi * radius ** 2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 2:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(radius):
    return 4 * math.pi * radius * radius
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 3:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
def surfacearea_sphere(radius):
    import math
    return 4 * math.pi * radius**2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 4:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(r):
    return 4 * math.pi * r ** 2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 5:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(radius):
    return 4 * math.pi * (radius ** 2)
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 6:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(radius):
    return 4 * math.pi * radius ** 2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 7:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(r):
    return 4 * math.pi * r ** 2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 8:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(r):
    return 4 * math.pi * r ** 2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 9:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(r):
    return 4 * math.pi * r**2
[/PYTHON]
================================================================================

Prompt 39, Sample Number: 10:
Model input: """
Write a function to find the surface area of a sphere.
assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def surfacearea_sphere(r):
    return 4 * math.pi * r ** 2
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 1:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 2:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 3:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 4:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * n - 3 * n + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 5:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 6:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 7:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 8:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 9:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 40, Sample Number: 10:
Model input: """
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
"""
Response:
 [PYTHON]
def centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 1:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 2:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    result = {}
    result.update(dict1)
    result.update(dict2)
    result.update(dict3)
    return result
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 3:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    result = {}
    result.update(dict1)
    result.update(dict2)
    result.update(dict3)
    return result
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 4:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    merged = dict1.copy()
    merged.update(dict2)
    merged.update(dict3)
    return merged
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 5:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    merged = {}
    merged.update(dict1)
    merged.update(dict2)
    merged.update(dict3)
    return merged
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 6:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 7:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 8:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    merged = {}
    merged.update(dict1)
    merged.update(dict2)
    merged.update(dict3)
    return merged
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 9:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}
[/PYTHON]
================================================================================

Prompt 41, Sample Number: 10:
Model input: """
Write a function to merge three dictionaries into a single dictionary.
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
"""
Response:
 [PYTHON]
def merge_dictionaries_three(dict1, dict2, dict3):
    merged = dict1.copy()
    merged.update(dict2)
    merged.update(dict3)
    return merged
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 1:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    frequency = {}
    for item in lst:
        frequency[item] = frequency.get(item, 0) + 1
    return frequency
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 2:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 3:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 4:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 5:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 6:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 7:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 8:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for item in lst:
        freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 9:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    frequency = {}
    for item in lst:
        frequency[item] = frequency.get(item, 0) + 1
    return frequency
[/PYTHON]
================================================================================

Prompt 42, Sample Number: 10:
Model input: """
Write a function to get the frequency of all the elements in a list, returned as a dictionary.
assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
"""
Response:
 [PYTHON]
def freq_count(lst):
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    return freq
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 1:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 2:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 3:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 4:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 5:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 6:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 7:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 8:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 9:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 43, Sample Number: 10:
Model input: """
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
"""
Response:
 [PYTHON]
def closest_num(n):
    return n - 1
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 1:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words) if words else 0
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 2:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 3:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 4:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 5:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 6:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 7:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words) if words else 0
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 8:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 9:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 44, Sample Number: 10:
Model input: """
Write a python function to find the length of the longest word.
assert len_log(["python","PHP","bigdata"]) == 7
"""
Response:
 [PYTHON]
def len_log(words):
    return max(len(word) for word in words)
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 1:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(string_list, substring):
    for s in string_list:
        if substring in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 2:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(strings, substr):
    for s in strings:
        if substr in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 3:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(strings, substring):
    return any(substring in s for s in strings)
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 4:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(strings, substring):
    for s in strings:
        if substring in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 5:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(strings, sub):
    for s in strings:
        if sub in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 6:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(lst, substr):
    return any(substr in s for s in lst)
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 7:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(str_list, substring):
    for s in str_list:
        if substring in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 8:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(strings, sub):
    for string in strings:
        if sub in string:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 9:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(string_list, sub):
    return any(sub in s for s in string_list)
[/PYTHON]
================================================================================

Prompt 45, Sample Number: 10:
Model input: """
Write a function to check if a string is present as a substring in a given list of string values.
assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
"""
Response:
 [PYTHON]
def find_substring(string_list, substring):
    for s in string_list:
        if substring in s:
            return True
    return False
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 1:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, char in enumerate(s):
        if i % 2 == 0:
            if char != a:
                return False
        else:
            if char != b:
                return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 2:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 2:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, digit in enumerate(s):
        if i % 2 == 0 and digit != a:
            return False
        if i % 2 == 1 and digit != b:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 3:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 2:
        return False
    first, second = s[0], s[1]
    if first == second:
        return False
    for i, ch in enumerate(s):
        if i % 2 == 0 and ch != first:
            return False
        if i % 2 == 1 and ch != second:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 4:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 2:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, ch in enumerate(s):
        if i % 2 == 0 and ch != a:
            return False
        if i % 2 == 1 and ch != b:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 5:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    # Must have exactly two different digits.
    if len(set(s)) != 2:
        return False
    # Check pattern: even positions are the same, odd positions are the same, and both groups are different.
    even_digit = s[0]
    odd_digit = s[1]
    if even_digit == odd_digit:
        return False
    for i, char in enumerate(s):
        if i % 2 == 0:
            if char != even_digit:
                return False
        else:
            if char != odd_digit:
                return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 6:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 2:
        return False
    if s[0] == s[1]:
        return False
    for i in range(len(s)):
        if i % 2 == 0 and s[i] != s[0]:
            return False
        if i % 2 == 1 and s[i] != s[1]:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 7:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, char in enumerate(s):
        if i % 2 == 0 and char != a:
            return False
        if i % 2 == 1 and char != b:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 8:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 2:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, char in enumerate(s):
        if i % 2 == 0 and char != a:
            return False
        if i % 2 == 1 and char != b:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 9:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    a, b = s[0], s[1]
    if a == b:
        return False
    for i, ch in enumerate(s):
        expected = a if i % 2 == 0 else b
        if ch != expected:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 46, Sample Number: 10:
Model input: """
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
"""
Response:
 [PYTHON]
def is_undulating(n):
    s = str(n)
    if len(s) < 3 or s[0] == s[1]:
        return False
    for i, char in enumerate(s):
        if i % 2 == 0 and char != s[0]:
            return False
        elif i % 2 == 1 and char != s[1]:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 1:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 2:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 3:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 4:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 5:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 6:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 7:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 8:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 9:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 47, Sample Number: 10:
Model input: """
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
"""
Response:
 [PYTHON]
def power(a, b):
    return a ** b
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 1:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(lst):
    return min(lst, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 2:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(tuple_list):
    return min(tuple_list, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 3:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(lst):
    return min(lst, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 4:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(tuple_list):
    return min(tuple_list, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 5:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(lst):
    return min(lst, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 6:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(tuples_list):
    return min(tuples_list, key=lambda t: t[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 7:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(tuples_list):
    return min(tuples_list, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 8:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(lst):
    return min(lst, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 9:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(data):
    return min(data, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 48, Sample Number: 10:
Model input: """
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
"""
Response:
 [PYTHON]
def index_minimum(tuples_list):
    return min(tuples_list, key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 1:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(lst) for lst in lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 2:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(lst) for lst in lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 3:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(lst) for lst in lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 4:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(list_of_lists):
    return min(len(lst) for lst in list_of_lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 5:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(sublist) for sublist in lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 6:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(lst) for lst in lists)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 7:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lst):
    return min(len(sub) for sub in lst)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 8:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lst):
    return min(len(sublist) for sublist in lst)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 9:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lst_of_lsts):
    return min(len(lst) for lst in lst_of_lsts)
[/PYTHON]
================================================================================

Prompt 49, Sample Number: 10:
Model input: """
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
"""
Response:
 [PYTHON]
def Find_Min_Length(lists):
    return min(len(lst) for lst in lists)
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 1:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
import math

def divisor(n):
    count = 0
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 2:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 3:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 4:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 5:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 6:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 7:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 8:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 9:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if i * i == n:
                count += 1
            else:
                count += 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 50, Sample Number: 10:
Model input: """
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
"""
Response:
 [PYTHON]
def divisor(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            count += 1 if i * i == n else 2
        i += 1
    return count
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 1:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    from collections import Counter
    flat_list = [item for sublist in lst for item in sublist]
    return dict(Counter(flat_list))
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 2:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 3:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 4:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 5:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 6:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sub in lst:
        for item in sub:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 7:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for element in sublist:
            freq[element] = freq.get(element, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 8:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst):
    freq = {}
    for sublist in lst:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 9:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lst_of_lsts):
    freq = {}
    for sublist in lst_of_lsts:
        for item in sublist:
            freq[item] = freq.get(item, 0) + 1
    return freq
[/PYTHON]
================================================================================

Prompt 51, Sample Number: 10:
Model input: """
Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.
assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""
Response:
 [PYTHON]
def frequency_lists(lists):
    result = {}
    for sublist in lists:
        for item in sublist:
            result[item] = result.get(item, 0) + 1
    return result
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 1:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(nums):
    prod = 1
    for num in nums:
        prod *= num
    return prod / len(nums)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 2:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 3:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(nums):
    product = 1
    for num in nums:
        product *= num
    return product / len(nums)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 4:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 5:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 6:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 7:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 8:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 9:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
[/PYTHON]
================================================================================

Prompt 52, Sample Number: 10:
Model input: """
Write a function to multiply all the numbers in a list and divide with the length of the list.
assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
"""
Response:
 [PYTHON]
def multiply_num(numbers):
    product = 1
    count = 0
    for number in numbers:
        product *= number
        count += 1
    return product / count
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 1:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n: int) -> str:
    if n == 0:
        return '0'
    result = ""
    while n:
        result = str(n % 2) + result
        n //= 2
    return result
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 2:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary_str = ""
    while n:
        binary_str = str(n % 2) + binary_str
        n //= 2
    return binary_str
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 3:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary = ""
    while n:
        binary = str(n % 2) + binary
        n //= 2
    return binary
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 4:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(number):
    return bin(number)[2:]
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 5:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary = ""
    while n > 0:
        binary = str(n % 2) + binary
        n //= 2
    return binary
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 6:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    return bin(n)[2:]
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 7:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary = ""
    while n:
        binary = str(n % 2) + binary
        n //= 2
    return binary
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 8:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary = ""
    while n > 0:
        binary = str(n % 2) + binary
        n //= 2
    return binary
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 9:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    if n == 0:
        return "0"
    binary_digits = []
    while n > 0:
        binary_digits.append(str(n % 2))
        n //= 2
    return ''.join(reversed(binary_digits))
[/PYTHON]
================================================================================

Prompt 53, Sample Number: 10:
Model input: """
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
"""
Response:
 [PYTHON]
def decimal_to_binary(n):
    return bin(n)[2:]
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 1:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    n += 1
    while str(n) != str(n)[::-1]:
        n += 1
    return n
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 2:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n):
    candidate = n + 1
    while True:
        if str(candidate) == str(candidate)[::-1]:
            return candidate
        candidate += 1
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 3:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    candidate = n + 1
    while True:
        if str(candidate) == str(candidate)[::-1]:
            return candidate
        candidate += 1
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 4:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    num = n + 1
    while True:
        if str(num) == str(num)[::-1]:
            return num
        num += 1
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 5:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n):
    candidate = n + 1
    while str(candidate) != str(candidate)[::-1]:
        candidate += 1
    return candidate
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 6:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n):
    candidate = n + 1
    while True:
        if str(candidate) == str(candidate)[::-1]:
            return candidate
        candidate += 1
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 7:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    n += 1
    while str(n) != str(n)[::-1]:
        n += 1
    return n
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 8:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n):
    candidate = n + 1
    while str(candidate) != str(candidate)[::-1]:
        candidate += 1
    return candidate
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 9:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    n += 1
    while str(n) != str(n)[::-1]:
        n += 1
    return n
[/PYTHON]
================================================================================

Prompt 54, Sample Number: 10:
Model input: """
Write a function to find the next smallest palindrome of a specified integer, returned as an integer.
assert next_smallest_palindrome(99)==101
"""
Response:
 [PYTHON]
def next_smallest_palindrome(n: int) -> int:
    num = n + 1
    while str(num) != str(num)[::-1]:
        num += 1
    return num
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 1:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 2:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 3:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 4:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 5:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 6:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 7:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 8:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 9:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 55, Sample Number: 10:
Model input: """
Write a function to find the kth element in the given array using 1-based indexing.
assert kth_element([12,3,5,7,19], 2) == 3
"""
Response:
 [PYTHON]
def kth_element(arr, k):
    return arr[k - 1]
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 1:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 2:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(snake_str):
    return ''.join(word.capitalize() for word in snake_str.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 3:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 4:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 5:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 6:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 7:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 8:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return ''.join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 9:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(s):
    return "".join(word.capitalize() for word in s.split('_'))
[/PYTHON]
================================================================================

Prompt 56, Sample Number: 10:
Model input: """
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
"""
Response:
 [PYTHON]
def snake_to_camel(snake_str):
    return ''.join(word.capitalize() for word in snake_str.split('_'))
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 1:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)
    
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 2:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 3:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
from functools import lru_cache

@lru_cache(maxsize=None)
def eulerian_num(n, m):
    if n == 0:
        return 1 if m == 0 else 0
    if m < 0 or m >= n:
        return 0
    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 4:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
from functools import lru_cache

def eulerian_num(n, m):
    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 5:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def helper(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (n - m) * helper(n - 1, m - 1) + (m + 1) * helper(n - 1, m)
    return helper(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 6:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
from functools import lru_cache

def eulerian_num(n, m):
    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0 and m == 0:
            return 1
        if m < 0 or m >= n:
            return 0
        return (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 7:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(1, n + 1):
        for j in range(i):
            left = dp[i - 1][j - 1] if j - 1 >= 0 else 0
            right = dp[i - 1][j]
            dp[i][j] = (i - j) * left + (j + 1) * right
    return dp[n][m]
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 8:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (n - m) * A(n - 1, m - 1) + (m + 1) * A(n - 1, m)
    
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 9:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def A(n, m):
        if n == 0:
            return 1 if m == 0 else 0
        if m < 0 or m >= n:
            return 0
        return (m + 1) * A(n - 1, m) + (n - m) * A(n - 1, m - 1)
    return A(n, m)
[/PYTHON]
================================================================================

Prompt 57, Sample Number: 10:
Model input: """
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
"""
Response:
 [PYTHON]
def eulerian_num(n, m):
    if n == 0:
        return 1 if m == 0 else 0
    if m < 0 or m >= n:
        return 0
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(1, n + 1):
        for j in range(0, i + 1):
            term1 = (i - j) * dp[i - 1][j - 1] if j - 1 >= 0 else 0
            term2 = (j + 1) * dp[i - 1][j] if j <= i - 1 else 0
            dp[i][j] = term1 + term2
    return dp[n][m]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 1:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 2:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lst):
    return [sorted(sublist) for sublist in lst]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 3:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lists):
    return [sorted(sublist) for sublist in lists]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 4:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lst):
    return [sorted(sublist) for sublist in lst]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 5:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 6:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lst):
    return [sorted(sublist) for sublist in lst]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 7:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 8:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lists):
    return [sorted(sublist) for sublist in lists]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 9:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(lst):
    return [sorted(sublist) for sublist in lst]
[/PYTHON]
================================================================================

Prompt 58, Sample Number: 10:
Model input: """
Write a function to sort each sublist of strings in a given list of lists.
assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
"""
Response:
 [PYTHON]
def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 1:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(1 for item in lst if item is True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 2:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(1 for item in lst if item is True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 3:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return lst.count(True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 4:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return lst.count(True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 5:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(1 for x in lst if x)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 6:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(lst)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 7:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(1 for item in lst if item is True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 8:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return lst.count(True)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 9:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(lst)
[/PYTHON]
================================================================================

Prompt 59, Sample Number: 10:
Model input: """
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
"""
Response:
 [PYTHON]
def count(lst):
    return sum(1 for x in lst if x is True)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 1:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 2:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 3:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 4:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 5:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tpl):
    return tpl + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 6:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tpl):
    return tpl + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 7:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tpl):
    return tpl + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 8:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tpl):
    return tpl + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 9:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 60, Sample Number: 10:
Model input: """
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
"""
Response:
 [PYTHON]
def add_lists(lst, tup):
    return tup + tuple(lst)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 1:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 2:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(lst1, lst2, lst3):
    return sorted(lst1 + lst2 + lst3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 3:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    merged_list = list1 + list2 + list3
    merged_list.sort()
    return merged_list
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 4:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 5:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 6:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(lst1, lst2, lst3):
    return sorted(lst1 + lst2 + lst3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 7:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 8:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 9:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 61, Sample Number: 10:
Model input: """
Write a function to merge three lists into a single sorted list.
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
"""
Response:
 [PYTHON]
def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 1:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(binary_string, rotations):
    count = 0
    s = binary_string
    for _ in range(rotations):
        if s[-1] == '1':
            count += 1
        s = s[1:] + s[0]
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 2:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, rotations):
    count = 0
    for _ in range(rotations):
        s = s[-1] + s[:-1]
        if s[-1] == '1':
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 3:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, rotations):
    count = 0
    for _ in range(rotations):
        s = s[-1] + s[:-1]
        if s[-1] == '1':
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 4:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, rotations):
    count = 0
    for _ in range(rotations):
        if s[-1] == '1':
            count += 1
        s = s[1:] + s[0]
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 5:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, rotations):
    count = 0
    current = s
    for _ in range(rotations):
        if current[-1] == '1':
            count += 1
        current = current[1:] + current[0]
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 6:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, rotations):
    count = 0
    for _ in range(rotations):
        s = s[1:] + s[0]
        if s[-1] == '1':
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 7:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(binary, times):
    count = 0
    s = binary
    for _ in range(times):
        if int(s, 2) % 2 == 1:
            count += 1
        s = s[1:] + s[0]
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 8:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, n):
    count = 0
    current = s
    for _ in range(n):
        if current[-1] == '1':
            count += 1
        current = current[-1] + current[:-1]
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 9:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(binary_str, rotations):
    count = 0
    s = binary_str
    if s[-1] == '1':
        count += 1
    for _ in range(1, rotations):
        s = s[1:] + s[0]
        if s[-1] == '1':
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 62, Sample Number: 10:
Model input: """
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent("011001",6) == 3
"""
Response:
 [PYTHON]
def odd_Equivalent(s, n):
    count = 0
    for i in range(n):
        rotated = s[-i:] + s[:-i]
        if rotated[-1] == "1":
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 1:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common &= set(lst)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 2:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for sublist in nested_lists[1:]:
        common.intersection_update(sublist)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 3:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common &= set(lst)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 4:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common &= set(lst)
    return list(common)
    
# Note: If ordering matters, you'll need to sort or preserve order in some way.
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 5:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common.intersection_update(lst)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 6:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common.intersection_update(lst)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 7:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for sublist in nested_lists[1:]:
        common &= set(sublist)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 8:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    common_elements = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common_elements &= set(lst)
    return list(common_elements)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 9:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common &= set(lst)
    return list(common)
[/PYTHON]
================================================================================

Prompt 63, Sample Number: 10:
Model input: """
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
"""
Response:
 [PYTHON]
def common_in_nested_lists(nested_lists):
    if not nested_lists:
        return []
    common_set = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common_set &= set(lst)
    return list(common_set)
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 1:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 2:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 3:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 4:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 5:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 6:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 7:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 8:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 9:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 64, Sample Number: 10:
Model input: """
Write a function to check if a string represents an integer or not.
assert check_integer("python")==False
"""
Response:
 [PYTHON]
def check_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 1:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(str(digit) for digit in t))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 2:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(str(num) for num in t))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 3:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(map(str, t)))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 4:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(map(str, t)))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 5:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(tup):
    return int(''.join(str(num) for num in tup))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 6:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(map(str, t)))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 7:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int(''.join(str(num) for num in t))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 8:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(map(str, t)))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 9:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(t):
    return int("".join(map(str, t)))
[/PYTHON]
================================================================================

Prompt 65, Sample Number: 10:
Model input: """
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
"""
Response:
 [PYTHON]
def tuple_to_int(tup):
    return int(''.join(map(str, tup)))
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 1:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split()
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 2:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split()
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 3:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split(" ")
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 4:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split(" ")
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 5:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split()
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 6:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split()
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 7:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split(" ")
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 8:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split(" ")
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 9:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split(" ")
[/PYTHON]
================================================================================

Prompt 66, Sample Number: 10:
Model input: """
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list("python programming")==['python','programming']
"""
Response:
 [PYTHON]
def string_to_list(s):
    return s.split()
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 1:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    low, high = 0, len(nums) - 1
    while low < high:
        mid = low + (high - low) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            low = mid + 2
        else:
            high = mid
    return nums[low]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 2:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    low, high = 0, len(nums) - 1
    while low < high:
        mid = (low + high) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            low = mid + 2
        else:
            high = mid
    return nums[low]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 3:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(arr):
    left, right = 0, len(arr) - 1
    while left < right:
        mid = left + (right - left) // 2
        # Ensure mid is even for comparison with next element.
        if mid % 2 == 1:
            mid -= 1
        if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:
            left = mid + 2
        else:
            right = mid
    return arr[left]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 4:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(arr):
    low, high = 0, len(arr) - 1
    while low < high:
        mid = low + (high - low) // 2
        if mid % 2 == 1:
            mid -= 1
        if arr[mid] == arr[mid + 1]:
            low = mid + 2
        else:
            high = mid
    return arr[low]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 5:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            left = mid + 2
        else:
            right = mid
    return nums[left]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 6:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(arr):
    low, high = 0, len(arr) - 1
    while low < high:
        mid = (low + high) // 2
        if mid % 2 == 1:
            mid -= 1
        if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:
            low = mid + 2
        else:
            high = mid
    return arr[low]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 7:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            left = mid + 2
        else:
            right = mid
    return nums[left]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 8:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            left = mid + 2
        else:
            right = mid
    return nums[left]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 9:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    low, high = 0, len(nums) - 1
    while low < high:
        mid = (low + high) // 2
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            low = mid + 2
        else:
            high = mid
    return nums[low]
[/PYTHON]
================================================================================

Prompt 67, Sample Number: 10:
Model input: """
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
"""
Response:
 [PYTHON]
def search(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        # Ensure mid is even so that pairs start at even indices
        if mid % 2 == 1:
            mid -= 1
        if nums[mid] == nums[mid + 1]:
            left = mid + 2
        else:
            right = mid
    return nums[left]
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 1:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(tuples):
    return max(abs(a * b) for a, b in tuples)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 2:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    return max(abs(a * b) for a, b in lst)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 3:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    return max(abs(a * b) for a, b in lst)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 4:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    return max(abs(a * b) for a, b in lst)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 5:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    return max(abs(a * b) for a, b in lst)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 6:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    max_product = None
    for a, b in lst:
        product = abs(a * b)
        if max_product is None or product > max_product:
            max_product = product
    return max_product
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 7:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    return max(abs(a * b) for a, b in lst)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 8:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(tuples):
    return max(abs(a * b) for a, b in tuples)
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 9:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(lst):
    max_product = 0
    for t in lst:
        product = abs(t[0] * t[1])
        if product > max_product:
            max_product = product
    return max_product
[/PYTHON]
================================================================================

Prompt 68, Sample Number: 10:
Model input: """
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
"""
Response:
 [PYTHON]
def max_product_tuple(tuples_list):
    max_product = 0
    for a, b in tuples_list:
        product = abs(a * b)
        if product > max_product:
            max_product = product
    return max_product
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 1:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(x):
        if x < 2:
            return 0
        s = 1
        r = int(x**0.5)
        for i in range(2, r+1):
            if x % i == 0:
                s += i
                d = x // i
                if d != i:
                    s += d
        return s

    total = 0
    for i in range(2, n+1):
        j = sum_proper_divisors(i)
        if i != j and j <= n and sum_proper_divisors(j) == i:
            total += i
    return total
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 2:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_of_divisors(num):
        total = 1 if num > 1 else 0
        sqrt_n = int(num**0.5)
        for i in range(2, sqrt_n + 1):
            if num % i == 0:
                total += i
                other = num // i
                if other != i:
                    total += other
        return total

    total_sum = 0
    for i in range(2, n + 1):
        partner = sum_of_divisors(i)
        if partner > i and partner <= n:
            if sum_of_divisors(partner) == i:
                total_sum += i + partner
    return total_sum
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 3:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(limit):
    def sum_divisors(n):
        total = 1
        # Only calculate up to sqrt(n)
        # for n=1, proper divisors sum is 0
        if n == 1:
            return 0
        # check divisors from 2 to sqrt(n)
        i = 2
        while i*i <= n:
            if n % i == 0:
                total += i
                if i != n // i:
                    total += n // i
            i += 1
        return total

    total_sum = 0
    for a in range(2, limit + 1):
        b = sum_divisors(a)
        if b > a and b <= limit and sum_divisors(b) == a:
            total_sum += a + b
    return total_sum
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 4:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(x):
        if x < 2:
            return 0
        total = 1
        limit = int(x**0.5)
        for i in range(2, limit + 1):
            if x % i == 0:
                total += i
                if i != x // i:
                    total += x // i
        return total

    total_sum = 0
    for i in range(2, n + 1):
        partner = sum_proper_divisors(i)
        if partner != i and sum_proper_divisors(partner) == i:
            total_sum += i
    return total_sum
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 5:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_divisors(x):
        if x < 2:
            return 0
        total = 1
        r = int(x**0.5)
        for i in range(2, r+1):
            if x % i == 0:
                total += i
                j = x // i
                if i != j:
                    total += j
        return total

    amicable_set = set()
    for i in range(2, n+1):
        s = sum_divisors(i)
        if s != i and s <= n and sum_divisors(s) == i:
            amicable_set.add(i)
            amicable_set.add(s)
    return sum(num for num in amicable_set if num <= n)
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 6:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(num):
        if num < 2:
            return 0
        s = 1
        i = 2
        while i * i <= num:
            if num % i == 0:
                s += i
                if i * i != num:
                    s += num // i
            i += 1
        return s
        
    amicable = set()
    for a in range(2, n + 1):
        b = sum_proper_divisors(a)
        if b != a and b <= n and sum_proper_divisors(b) == a:
            amicable.add(a)
            amicable.add(b)
    return sum(amicable)
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 7:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(num):
        if num <= 1:
            return 0
        s = 1
        upper = int(num**0.5)
        for i in range(2, upper + 1):
            if num % i == 0:
                s += i
                other = num // i
                if other != i:
                    s += other
        return s

    amicables = set()
    for i in range(2, n + 1):
        j = sum_proper_divisors(i)
        if j != i and j <= n and sum_proper_divisors(j) == i:
            amicables.add(i)
            amicables.add(j)
    return sum(amicables)
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 8:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(x):
        if x == 1:
            return 0
        s = 1
        r = int(x ** 0.5)
        for i in range(2, r + 1):
            if x % i == 0:
                s += i
                if i != x // i:
                    s += x // i
        return s

    amicables = set()
    for i in range(2, n + 1):
        j = sum_proper_divisors(i)
        if j != i and j <= n and sum_proper_divisors(j) == i:
            amicables.add(i)
            amicables.add(j)
    return sum(amicables)
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 9:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(limit):
    def sum_proper_divisors(n):
        if n <= 1:
            return 0
        s = 1
        i = 2
        while i * i <= n:
            if n % i == 0:
                s += i
                if i * i != n:
                    s += n // i
            i += 1
        return s

    total = 0
    for num in range(2, limit + 1):
        partner = sum_proper_divisors(num)
        if partner != num and sum_proper_divisors(partner) == num:
            total += num
    return total
[/PYTHON]
================================================================================

Prompt 69, Sample Number: 10:
Model input: """
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
"""
Response:
 [PYTHON]
def amicable_numbers_sum(n):
    def sum_proper_divisors(num):
        if num < 2:
            return 0
        s = 1
        sqrt_num = int(num**0.5)
        for i in range(2, sqrt_num + 1):
            if num % i == 0:
                s += i
                j = num // i
                if i != j:
                    s += j
        return s

    amicable_set = set()
    for i in range(2, n + 1):
        partner = sum_proper_divisors(i)
        if partner != i and sum_proper_divisors(partner) == i:
            amicable_set.add(i)
    return sum(amicable_set)
    
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 1:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    c = a + b
    return math.atan2(c.imag, c.real)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 2:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def angle_complex(*args):
    if len(args) == 1:
        z = args[0]
    elif len(args) == 2:
        if isinstance(args[1], complex):
            z = args[1]
        else:
            z = complex(args[0], args[1])
    else:
        raise TypeError("angle_complex takes 1 or 2 arguments")
    return math.atan2(z.imag, z.real)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 3:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math
def angle_complex(a, b):
    if isinstance(a, complex):
        a = a.real
    if isinstance(b, complex):
        b = b.imag
    return math.atan2(b, a)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 4:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    re = a if not isinstance(a, complex) else a.real
    im = b if not isinstance(b, complex) else b.imag
    return math.atan2(im, re)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 5:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import cmath
    return cmath.phase(a + b)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 6:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    y = b.imag if isinstance(b, complex) else b
    return math.atan2(y, a)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 7:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    if isinstance(b, complex):
        b = b.imag
    return math.atan2(b, a)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 8:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    imag = b.imag if isinstance(b, complex) else b
    return math.atan2(imag, a)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 9:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    if isinstance(b, complex):
        b = b.imag
    return math.atan2(b, a)
[/PYTHON]
================================================================================

Prompt 70, Sample Number: 10:
Model input: """
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
"""
Response:
 [PYTHON]
def angle_complex(a, b):
    import math
    z = a + b
    return math.atan2(z.imag, z.real)
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 1:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_diff = float('-inf')
    current = 0
    for ch in s:
        value = 1 if ch == '0' else -1
        current = max(value, current + value)
        max_diff = max(max_diff, current)
    return max_diff
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 2:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    # Transform the string: +1 for '0' and -1 for '1'
    arr = [1 if char == '0' else -1 for char in s]
    
    # Kadane's algorithm to find maximum subarray sum
    max_current = arr[0]
    max_global = arr[0]
    
    for num in arr[1:]:
        max_current = max(num, max_current + num)
        if max_current > max_global:
            max_global = max_current
            
    return max_global
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 3:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_sum = float('-inf')
    current = 0
    for char in s:
        val = 1 if char == '0' else -1
        current += val
        if current > max_sum:
            max_sum = current
        if current < 0:
            current = 0
    return max_sum
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 4:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_diff = 0
    current = 0
    for char in s:
        value = 1 if char == '0' else -1
        current = max(value, current + value)
        max_diff = max(max_diff, current)
    return max_diff
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 5:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_diff = 0
    curr = 0
    for char in s:
        if char == '0':
            curr += 1
        else:
            curr -= 1
        curr = max(curr, 0)
        max_diff = max(max_diff, curr)
    return max_diff
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 6:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    arr = [1 if char == '0' else -1 for char in s]
    current = arr[0]
    max_sum = arr[0]
    for num in arr[1:]:
        current = max(num, current + num)
        max_sum = max(max_sum, current)
    return max_sum
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 7:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    current = 0
    max_sum = -float("inf")
    for ch in s:
        val = 1 if ch == '0' else -1
        current = max(val, current + val)
        max_sum = max(max_sum, current)
    return max_sum
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 8:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(binary_string):
    max_diff = current = 0
    for char in binary_string:
        current += 1 if char == '0' else -1
        if current < 0:
            current = 0
        if current > max_diff:
            max_diff = current
    return max_diff
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 9:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_so_far = float('-inf')
    current_sum = 0
    for ch in s:
        val = 1 if ch == '0' else -1
        current_sum = val if current_sum < 0 else current_sum + val
        max_so_far = max(max_so_far, current_sum)
    return max_so_far
[/PYTHON]
================================================================================

Prompt 71, Sample Number: 10:
Model input: """
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length("11000010001") == 6
"""
Response:
 [PYTHON]
def find_length(s):
    max_current = float('-inf')
    max_global = float('-inf')
    for ch in s:
        value = 1 if ch == '0' else -1
        max_current = value if max_current < 0 else max_current + value
        if max_current > max_global:
            max_global = max_current
    return max_global
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 1:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    m = min(a, b)
    total = 0
    for i in range(1, m + 1):
        if a % i == 0 and b % i == 0:
            total += i
    return total
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 2:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    from math import gcd, isqrt
    g = gcd(a, b)
    total = 0
    for i in range(1, isqrt(g) + 1):
        if g % i == 0:
            j = g // i
            total += i
            if i != j:
                total += j
    return total
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 3:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    result = 0
    for i in range(1, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            result += i
    return result
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 4:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    import math
    def sum_divisors(n):
        total = 0
        i = 1
        while i * i <= n:
            if n % i == 0:
                total += i
                if i != n // i:
                    total += n // i
            i += 1
        return total
    g = math.gcd(a, b)
    return sum_divisors(g)
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 5:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
import builtins
def sum(a, b):
    return builtins.sum(i for i in range(1, min(a, b)+1) if a % i == 0 and b % i == 0)
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 6:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
import math

def sum(a, b):
    g = math.gcd(a, b)
    total = 0
    i = 1
    while i * i <= g:
        if g % i == 0:
            total += i
            if i != g // i:
                total += g // i
        i += 1
    return total
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 7:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    from math import gcd, isqrt
    g = gcd(a, b)
    total = 0
    for d in range(1, isqrt(g) + 1):
        if g % d == 0:
            total += d
            other = g // d
            if other != d:
                total += other
    return total
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 8:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    import math
    g = math.gcd(a, b)
    total = 0
    i = 1
    while i * i <= g:
        if g % i == 0:
            total += i
            if i != g // i:
                total += g // i
        i += 1
    return total
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 9:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    builtin_sum = __import__('builtins').sum
    d1 = {i for i in range(1, abs(a) + 1) if a % i == 0}
    d2 = {i for i in range(1, abs(b) + 1) if b % i == 0}
    return builtin_sum(d1 & d2)
[/PYTHON]
================================================================================

Prompt 72, Sample Number: 10:
Model input: """
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
"""
Response:
 [PYTHON]
def sum(a, b):
    import math
    g = math.gcd(a, b)
    total = 0
    i = 1
    while i*i <= g:
        if g % i == 0:
            total += i
            if i != g // i:
                total += g // i
        i += 1
    return total
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 1:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 2:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 3:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 4:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 5:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 6:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 7:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 8:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 9:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 73, Sample Number: 10:
Model input: """
Write a function to multiply two integers.
assert multiply_int(10,20)==200
"""
Response:
 [PYTHON]
def multiply_int(a, b):
    return a * b
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 1:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, sentence):
    return [word for word in sentence.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 2:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, text):
    return [word for word in text.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 3:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, words):
    if isinstance(words, str):
        words = words.split()
    return [word for word in words if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 4:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, sentence):
    return [word for word in sentence.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 5:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, s):
    return [word for word in s.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 6:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, s):
    return [word for word in s.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 7:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, text):
    return [word for word in text.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 8:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, s):
    return [word for word in s.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 9:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, s):
    return [word for word in s.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 74, Sample Number: 10:
Model input: """
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,"python is a programming language")==['python','programming','language']
"""
Response:
 [PYTHON]
def long_words(n, s):
    return [word for word in s.split() if len(word) > n]
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 1:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    # Check if matrix is empty or not square
    if n == 0 or any(len(row) != n for row in matrix):
        return False

    # Calculate the target sum using the first row
    target = sum(matrix[0])
    
    # Check rows
    for row in matrix:
        if sum(row) != target:
            return False

    # Check columns
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != target:
            return False

    # Check main diagonal
    if sum(matrix[i][i] for i in range(n)) != target:
        return False

    # Check secondary diagonal
    if sum(matrix[i][n - 1 - i] for i in range(n)) != target:
        return False

    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 2:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    if n == 0 or any(len(row) != n for row in matrix):
        return False
    magic_sum = sum(matrix[0])
    for row in matrix:
        if sum(row) != magic_sum:
            return False
    for j in range(n):
        if sum(matrix[i][j] for i in range(n)) != magic_sum:
            return False
    if sum(matrix[i][i] for i in range(n)) != magic_sum:
        return False
    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 3:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    target = sum(matrix[0])
    for row in matrix:
        if sum(row) != target:
            return False
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != target:
            return False
    if sum(matrix[i][i] for i in range(n)) != target:
        return False
    if sum(matrix[i][n-1-i] for i in range(n)) != target:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 4:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    if n == 0 or any(len(row) != n for row in matrix):
        return False
    magic_sum = sum(matrix[0])
    # Check rows
    for row in matrix:
        if sum(row) != magic_sum:
            return False
    # Check columns
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != magic_sum:
            return False
    # Check main diagonal
    if sum(matrix[i][i] for i in range(n)) != magic_sum:
        return False
    # Check secondary diagonal
    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 5:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    if n == 0:
        return False
    magic_sum = sum(matrix[0])
    # Check rows
    for row in matrix:
        if sum(row) != magic_sum:
            return False
    # Check columns
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != magic_sum:
            return False
    # Check main diagonal
    if sum(matrix[i][i] for i in range(n)) != magic_sum:
        return False
    # Check secondary diagonal
    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 6:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    if any(len(row) != n for row in matrix):
        return False
    target_sum = sum(matrix[0])
    for row in matrix:
        if sum(row) != target_sum:
            return False
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != target_sum:
            return False
    if sum(matrix[i][i] for i in range(n)) != target_sum:
        return False
    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 7:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    target = sum(matrix[0])
    # Check rows
    for row in matrix:
        if sum(row) != target:
            return False
    # Check columns
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != target:
            return False
    # Check diagonals
    if sum(matrix[i][i] for i in range(n)) != target:
        return False
    if sum(matrix[i][n - 1 - i] for i in range(n)) != target:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 8:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    if any(len(row) != n for row in matrix):
        return False
    target = sum(matrix[0])
    for row in matrix:
        if sum(row) != target:
            return False
    for j in range(n):
        if sum(matrix[i][j] for i in range(n)) != target:
            return False
    if sum(matrix[i][i] for i in range(n)) != target:
        return False
    if sum(matrix[i][n-1-i] for i in range(n)) != target:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 9:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    target = sum(matrix[0])
    
    # Check rows
    for row in matrix:
        if sum(row) != target:
            return False
    
    # Check columns
    for j in range(n):
        if sum(matrix[i][j] for i in range(n)) != target:
            return False
    
    # Check main diagonal
    if sum(matrix[i][i] for i in range(n)) != target:
        return False
    
    # Check anti-diagonal
    if sum(matrix[i][n - i - 1] for i in range(n)) != target:
        return False
    
    return True
[/PYTHON]
================================================================================

Prompt 75, Sample Number: 10:
Model input: """
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
"""
Response:
 [PYTHON]
def magic_square_test(matrix):
    n = len(matrix)
    # Check if matrix is square
    if any(len(row) != n for row in matrix):
        return False
    
    # Target sum using the first row
    target = sum(matrix[0])
    
    # Check rows
    for row in matrix:
        if sum(row) != target:
            return False
    
    # Check columns
    for col in range(n):
        if sum(matrix[row][col] for row in range(n)) != target:
            return False
    
    # Check main diagonal
    if sum(matrix[i][i] for i in range(n)) != target:
        return False
    
    # Check secondary diagonal
    if sum(matrix[i][n-1-i] for i in range(n)) != target:
        return False
    
    return True
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 1:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    from collections import Counter
    return Counter(lst).most_common(1)[0][0]
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 2:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    counter = {}
    for item in lst:
        counter[item] = counter.get(item, 0) + 1
    max_item = None
    max_count = 0
    for item, count in counter.items():
        if count > max_count:
            max_count = count
            max_item = item
    return max_item
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 3:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    from collections import Counter
    counts = Counter(lst)
    return max(counts, key=counts.get)
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 4:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    counts = {}
    for item in lst:
        counts[item] = counts.get(item, 0) + 1
    return max(counts, key=counts.get)
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 5:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    counts = {}
    max_item = lst[0]
    max_count = 0
    for item in lst:
        counts[item] = counts.get(item, 0) + 1
        if counts[item] > max_count:
            max_count = counts[item]
            max_item = item
    return max_item
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 6:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    frequency = {}
    for item in lst:
        frequency[item] = frequency.get(item, 0) + 1
    max_item, max_count = None, 0
    for item, count in frequency.items():
        if count > max_count:
            max_count = count
            max_item = item
    return max_item
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 7:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    count = {}
    for item in lst:
        count[item] = count.get(item, 0) + 1
    max_item = None
    max_count = -1
    for item, freq in count.items():
        if freq > max_count:
            max_count = freq
            max_item = item
    return max_item
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 8:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    freq = {}
    for item in lst:
        freq[item] = freq.get(item, 0) + 1
    max_item = None
    max_count = -1
    for item, count in freq.items():
        if count > max_count:
            max_count = count
            max_item = item
    return max_item
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 9:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    from collections import Counter
    counts = Counter(lst)
    return max(counts.items(), key=lambda x: x[1])[0]
[/PYTHON]
================================================================================

Prompt 76, Sample Number: 10:
Model input: """
Write a function to find the item with maximum frequency in a given list.
assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
"""
Response:
 [PYTHON]
def max_occurrences(lst):
    from collections import Counter
    counts = Counter(lst)
    return max(counts, key=counts.get)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 1:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s: str) -> str:
    vowels = "aeiouAEIOU"
    s_list = list(s)
    left, right = 0, len(s_list) - 1
    while left < right:
        if s_list[left] not in vowels:
            left += 1
        elif s_list[right] not in vowels:
            right -= 1
        else:
            s_list[left], s_list[right] = s_list[right], s_list[left]
            left += 1
            right -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 2:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = "aeiouAEIOU"
    s_list = list(s)
    left, right = 0, len(s_list) - 1

    while left < right:
        if s_list[left] not in vowels:
            left += 1
            continue
        if s_list[right] not in vowels:
            right -= 1
            continue
        s_list[left], s_list[right] = s_list[right], s_list[left]
        left += 1
        right -= 1

    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 3:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = "aeiouAEIOU"
    s_list = list(s)
    l, r = 0, len(s_list) - 1
    while l < r:
        if s_list[l] not in vowels:
            l += 1
        elif s_list[r] not in vowels:
            r -= 1
        else:
            s_list[l], s_list[r] = s_list[r], s_list[l]
            l += 1
            r -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 4:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s: str) -> str:
    vowels = set("aeiouAEIOU")
    s_list = list(s)
    left, right = 0, len(s_list) - 1
    while left < right:
        if s_list[left] not in vowels:
            left += 1
        elif s_list[right] not in vowels:
            right -= 1
        else:
            s_list[left], s_list[right] = s_list[right], s_list[left]
            left += 1
            right -= 1
    return ''.join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 5:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = set("aeiouAEIOU")
    s_list = list(s)
    left, right = 0, len(s_list) - 1
    while left < right:
        if s_list[left] not in vowels:
            left += 1
        elif s_list[right] not in vowels:
            right -= 1
        else:
            s_list[left], s_list[right] = s_list[right], s_list[left]
            left += 1
            right -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 6:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s: str) -> str:
    vowels = "aeiouAEIOU"
    s_list = list(s)
    left, right = 0, len(s) - 1
    while left < right:
        if s_list[left] not in vowels:
            left += 1
        elif s_list[right] not in vowels:
            right -= 1
        else:
            s_list[left], s_list[right] = s_list[right], s_list[left]
            left += 1
            right -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 7:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s: str) -> str:
    vowels = "aeiouAEIOU"
    s_list = list(s)
    i, j = 0, len(s) - 1
    while i < j:
        while i < j and s_list[i] not in vowels:
            i += 1
        while i < j and s_list[j] not in vowels:
            j -= 1
        s_list[i], s_list[j] = s_list[j], s_list[i]
        i += 1
        j -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 8:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = "aeiouAEIOU"
    s_list = list(s)
    i, j = 0, len(s_list) - 1
    while i < j:
        while i < j and s_list[i] not in vowels:
            i += 1
        while i < j and s_list[j] not in vowels:
            j -= 1
        if i < j:
            s_list[i], s_list[j] = s_list[j], s_list[i]
            i += 1
            j -= 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 9:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = "aeiouAEIOU"
    s_list = list(s)
    i, j = 0, len(s_list) - 1
    while i < j:
        if s_list[i] not in vowels:
            i += 1
        elif s_list[j] not in vowels:
            j -= 1
        else:
            s_list[i], s_list[j] = s_list[j], s_list[i]
            i += 1
            j -= 1
    return ''.join(s_list)
[/PYTHON]
================================================================================

Prompt 77, Sample Number: 10:
Model input: """
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels("Python") == "Python"
"""
Response:
 [PYTHON]
def reverse_vowels(s):
    vowels = "aeiouAEIOU"
    s_list = list(s)
    left, right = 0, len(s) - 1
    while left < right:
        if s_list[left] not in vowels:
            left += 1
            continue
        if s_list[right] not in vowels:
            right -= 1
            continue
        s_list[left], s_list[right] = s_list[right], s_list[left]
        left, right = left + 1, right - 1
    return "".join(s_list)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 1:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(t):
    return ''.join(t)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 2:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return ''.join(tup)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 3:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(t):
    return ''.join(t)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 4:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return "".join(tup)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 5:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(t):
    return ''.join(t)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 6:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return "".join(tup)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 7:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(t):
    return "".join(t)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 8:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return ''.join(tup)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 9:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return ''.join(tup)
[/PYTHON]
================================================================================

Prompt 78, Sample Number: 10:
Model input: """
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
"""
Response:
 [PYTHON]
def tup_string(tup):
    return ''.join(tup)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 1:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(x for x in numbers if x < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 2:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(num for num in numbers if num < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 3:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(x for x in numbers if x < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 4:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(nums):
    return sum(x for x in nums if x < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 5:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(n for n in numbers if n < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 6:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(lst):
    return sum(n for n in lst if n < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 7:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(num for num in numbers if num < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 8:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(num for num in numbers if num < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 9:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(numbers):
    return sum(num for num in numbers if num < 0)
[/PYTHON]
================================================================================

Prompt 79, Sample Number: 10:
Model input: """
Write a function to calculate the sum of the negative numbers of a given list of numbers.
assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
"""
Response:
 [PYTHON]
def sum_negativenum(lst):
    return sum(x for x in lst if x < 0)
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 1:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return n * (2 * n - 1)
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 2:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return n * (2 * n - 1)
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 3:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return n * (2 * n - 1)
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 4:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n * n - n
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 5:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return n * (2 * n - 1)
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 6:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n * n - n
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 7:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n * n - n
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 8:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n * n - n
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 9:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n**2 - n
[/PYTHON]
================================================================================

Prompt 80, Sample Number: 10:
Model input: """
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
"""
Response:
 [PYTHON]
def hexagonal_num(n):
    return 2 * n ** 2 - n
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 1:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for num in arr if num == 0)
    nonzeros = sum(1 for num in arr if num != 0)
    return zeros / nonzeros if nonzeros != 0 else 0
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 2:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = arr.count(0)
    nonzeros = len(arr) - zeros
    if nonzeros == 0:
        return 0
    return zeros / nonzeros
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 3:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for x in arr if x == 0)
    non_zeros = sum(1 for x in arr if x != 0)
    return zeros / non_zeros if non_zeros != 0 else 0
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 4:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = arr.count(0)
    non_zeros = len(arr) - zeros
    if non_zeros == 0:
        return float('inf')
    return zeros / non_zeros
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 5:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for num in arr if num == 0)
    nonzeros = sum(1 for num in arr if num != 0)
    return zeros / nonzeros if nonzeros != 0 else float('inf')
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 6:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for x in arr if x == 0)
    non_zeros = len(arr) - zeros
    return zeros / non_zeros if non_zeros != 0 else 0
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 7:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for x in arr if x == 0)
    nonzeros = sum(1 for x in arr if x != 0)
    return zeros / nonzeros if nonzeros else 0
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 8:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = arr.count(0)
    nonzeros = len(arr) - zeros
    return zeros / nonzeros if nonzeros != 0 else 0
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 9:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeroes = sum(1 for x in arr if x == 0)
    non_zeroes = sum(1 for x in arr if x != 0)
    return zeroes / non_zeroes
[/PYTHON]
================================================================================

Prompt 81, Sample Number: 10:
Model input: """
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
"""
Response:
 [PYTHON]
def zero_count(arr):
    zeros = sum(1 for x in arr if x == 0)
    non_zeros = len(arr) - zeros
    return zeros / non_zeros if non_zeros else 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 1:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    # Only positive even numbers can be written as a sum of non-zero powers of 2
    return n > 0 and n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 2:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    return n > 0 and n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 3:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    # Only even numbers (>=2) can be represented as a sum of non-zero powers of 2.
    # This is because all non-zero powers of 2 (2^1, 2^2, ...) are even.
    return n > 0 and n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 4:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    if n <= 0:
        return False
    if n % 2 != 0:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 5:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    if n <= 0:
        return False
    return n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 6:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    return n >= 2 and n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 7:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    if n <= 0:
        return False
    # n must be even, as all allowed powers (2^1,2^2,...) are even.
    return n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 8:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    if n <= 0 or n % 2 != 0:
        return False
    return True
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 9:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    if n < 2:
        return False
    return n % 2 == 0
[/PYTHON]
================================================================================

Prompt 82, Sample Number: 10:
Model input: """
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
"""
Response:
 [PYTHON]
def is_Sum_Of_Powers_Of_Two(n):
    return n > 0 and (n & 1) == 0
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 1:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 2:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 3:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 4:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 5:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 6:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 7:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
def circle_circumference(radius):
    import math
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 8:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 9:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 83, Sample Number: 10:
Model input: """
Write a function to find the circumference of a circle.
assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def circle_circumference(radius):
    return 2 * math.pi * radius
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 1:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(list_of_lists):
    result = set()
    for sublist in list_of_lists:
        for item in sublist:
            result.add(item)
    return result
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 2:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    result = set()
    for sublist in lst:
        for elem in sublist:
            result.add(elem)
    return result
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 3:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(list_of_lists):
    return {num for sub_list in list_of_lists for num in sub_list}
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 4:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    return {number for sublist in lst for number in sublist}
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 5:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    result = set()
    for sublist in lst:
        for item in sublist:
            result.add(item)
    return result
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 6:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(list_of_lists):
    return {num for sublist in list_of_lists for num in sublist}
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 7:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    return {num for sub in lst for num in sub}
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 8:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(list_of_tuples):
    result = set()
    for tpl in list_of_tuples:
        result.update(tpl)
    return result
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 9:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    return {x for sublist in lst for x in sublist}
[/PYTHON]
================================================================================

Prompt 84, Sample Number: 10:
Model input: """
Write a function to flatten the list of lists into a single set of numbers.
assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])
"""
Response:
 [PYTHON]
def extract_singly(lst):
    result = set()
    for sub in lst:
        result.update(sub)
    return result
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 1:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    result = lst[:]
    n = len(result)
    for curr_size in range(n, 1, -1):
        max_index = 0
        for i in range(curr_size):
            if result[i] > result[max_index]:
                max_index = i
        if max_index != curr_size - 1:
            if max_index != 0:
                result[:max_index+1] = result[:max_index+1][::-1]
            result[:curr_size] = result[:curr_size][::-1]
    return result
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 2:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    arr = lst[:]
    def flip(i):
        left, right = 0, i
        while left < right:
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
            right -= 1
    n = len(arr)
    for curr_size in range(n, 1, -1):
        max_index = arr.index(max(arr[:curr_size]))
        if max_index != curr_size - 1:
            if max_index != 0:
                flip(max_index)
            flip(curr_size - 1)
    return arr
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 3:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    def flip(arr, k):
        return arr[:k+1][::-1] + arr[k+1:]
    arr = lst[:]
    n = len(arr)
    for curr in range(n, 1, -1):
        max_idx = arr.index(max(arr[:curr]))
        if max_idx != curr - 1:
            if max_idx != 0:
                arr = flip(arr, max_idx)
            arr = flip(arr, curr - 1)
    return arr
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 4:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    def flip(sub_lst, k):
        return sub_lst[:k+1][::-1] + sub_lst[k+1:]
    
    n = len(lst)
    arr = lst[:]
    for curr_size in range(n, 1, -1):
        max_index = arr.index(max(arr[:curr_size]))
        if max_index != curr_size - 1:
            if max_index != 0:
                arr = flip(arr, max_index)
            arr = flip(arr, curr_size - 1)
    return arr
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 5:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(arr):
    a = arr.copy()
    n = len(a)
    # Function to flip arr from start to index i inclusive
    def flip(sub_arr, i):
        left, right = 0, i
        while left < right:
            sub_arr[left], sub_arr[right] = sub_arr[right], sub_arr[left]
            left += 1
            right -= 1

    # Work on unsorted portion of array
    for curr_size in range(n, 1, -1):
        # Find index of maximum element in a[0:curr_size]
        max_index = 0
        for i in range(1, curr_size):
            if a[i] > a[max_index]:
                max_index = i
        # If max element is not already in the correct position
        if max_index != curr_size - 1:
            # Flip max element to the front if it's not already at position 0
            if max_index != 0:
                flip(a, max_index)
            # Now flip it into its final position
            flip(a, curr_size - 1)
    return a
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 6:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    arr = lst[:]
    n = len(arr)
    for curr_size in range(n, 1, -1):
        # Find index of the maximum element in arr[0:curr_size]
        max_idx = 0
        for i in range(1, curr_size):
            if arr[i] > arr[max_idx]:
                max_idx = i
        # If the maximum is not already at its correct position, flip it
        if max_idx != curr_size - 1:
            # Flip max element to the beginning if it's not already there
            if max_idx != 0:
                arr[:max_idx+1] = arr[:max_idx+1][::-1]
            # Flip it to its correct position
            arr[:curr_size] = arr[:curr_size][::-1]
    return arr
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 7:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    def flip(sublist, k):
        i, j = 0, k
        while i < j:
            sublist[i], sublist[j] = sublist[j], sublist[i]
            i += 1
            j -= 1

    res = lst[:]
    n = len(res)
    for size in range(n, 1, -1):
        max_index = res.index(max(res[:size]))
        if max_index != size - 1:
            flip(res, max_index)
            flip(res, size - 1)
    return res
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 8:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    arr = lst[:]
    n = len(arr)
    for curr_size in range(n, 1, -1):
        max_index = arr.index(max(arr[:curr_size]))
        if max_index != curr_size - 1:
            arr[:max_index + 1] = arr[:max_index + 1][::-1]
            arr[:curr_size] = arr[:curr_size][::-1]
    return arr
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 9:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    n = len(lst)
    for curr_size in range(n, 1, -1):
        max_index = lst.index(max(lst[:curr_size]))
        if max_index != curr_size - 1:
            if max_index != 0:
                lst[:max_index+1] = lst[:max_index+1][::-1]
            lst[:curr_size] = lst[:curr_size][::-1]
    return lst
[/PYTHON]
================================================================================

Prompt 85, Sample Number: 10:
Model input: """
Write a function to sort a list of elements.
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
"""
Response:
 [PYTHON]
def pancake_sort(lst):
    arr = lst[:]
    n = len(arr)
    for curr_size in range(n, 1, -1):
        max_index = max(range(curr_size), key=lambda i: arr[i])
        if max_index != curr_size - 1:
            if max_index != 0:
                arr[:max_index+1] = arr[:max_index+1][::-1]
            arr[:curr_size] = arr[:curr_size][::-1]
    return arr
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 1:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 2:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 3:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(lst1, lst2, lst3):
    count = 0
    for a, b, c in zip(lst1, lst2, lst3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 4:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    count = 0
    for a, b, c in zip(list1, list2, list3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 5:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(lst1, lst2, lst3):
    return sum(1 for a, b, c in zip(lst1, lst2, lst3) if a == b == c)
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 6:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(lst1, lst2, lst3):
    count = 0
    for a, b, c in zip(lst1, lst2, lst3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 7:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    count = 0
    for a, b, c in zip(list1, list2, list3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 8:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    count = 0
    for a, b, c in zip(list1, list2, list3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 9:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    count = 0
    for a, b, c in zip(list1, list2, list3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 86, Sample Number: 10:
Model input: """
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
"""
Response:
 [PYTHON]
def count_samepair(list1, list2, list3):
    count = 0
    for a, b, c in zip(list1, list2, list3):
        if a == b == c:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 1:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 2:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 3:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 4:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 5:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 6:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 7:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 8:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 9:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 87, Sample Number: 10:
Model input: """
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
"""
Response:
 [PYTHON]
def max_Abs_Diff(arr):
    return max(arr) - min(arr)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 1:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        g, x1, y1 = extended_gcd(b, a % b)
        x = y1
        y = x1 - (a // b) * y1
        return g, x, y

    # Handle the case when both a and b are 0.
    if a == 0 and b == 0:
        return (0, 0) if n == 0 else None

    g, x0, y0 = extended_gcd(a, b)
    if n % g != 0:
        return None
    factor = n // g
    return (x0 * factor, y0 * factor)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 2:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        gcd, x1, y1 = extended_gcd(b, a % b)
        return gcd, y1, x1 - (a // b) * y1

    gcd, x, y = extended_gcd(a, b)
    if n % gcd != 0:
        return None
    factor = n // gcd
    return x * factor, y * factor
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 3:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    from math import gcd
    if a == 0 and b == 0:
        return None if n != 0 else (0, 0)
    if a == 0:
        if b != 0 and n % b == 0:
            return (0, n // b)
        return None
    if b == 0:
        if a != 0 and n % a == 0:
            return (n // a, 0)
        return None

    d = gcd(a, b)
    if n % d != 0:
        return None
    a1, b1, n1 = a // d, b // d, n // d
    mod = abs(b1)
    # a1 and b1 are coprime so inverse exists
    inv = pow(a1, -1, mod)
    x = (n1 * inv) % mod
    y = (n1 - a1 * x) // b1
    return (x, y)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 4:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def egcd(a, b):
        if b == 0:
            return a, 1, 0
        g, x, y = egcd(b, a % b)
        return g, y, x - (a // b) * y

    g, x, y = egcd(a, b)
    if n % g != 0:
        return None
    factor = n // g
    return (x * factor, y * factor)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 5:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    import math

    # Handle special cases when one or both of a and b are zero.
    if a == 0 and b == 0:
        return (0, 0) if n == 0 else None
    if a == 0:
        return (0, n // b) if b != 0 and n % b == 0 else None
    if b == 0:
        return (n // a, 0) if a != 0 and n % a == 0 else None

    # Extended Euclidean Algorithm.
    def extended_gcd(x, y):
        if y == 0:
            return x, 1, 0
        g, x1, y1 = extended_gcd(y, x % y)
        return g, y1, x1 - (x // y) * y1

    # Get gcd and a particular solution for |a| and |b|.
    g, x0, y0 = extended_gcd(abs(a), abs(b))
    # Adjust signs if necessary.
    if a < 0:
        x0 = -x0
    if b < 0:
        y0 = -y0

    # No solution if n is not divisible by the gcd.
    if n % g != 0:
        return None

    # Scale the particular solution to the desired right-hand side.
    factor = n // g
    x0 *= factor
    y0 *= factor

    # The general solution is:
    #   x = x0 + k * (b // g)
    #   y = y0 - k * (a // g)
    kx = b // g
    ky = a // g

    # We now choose an integer k such that both x and y are nonnegative.
    # For x >= 0:  x0 + k*kx >= 0   =>   k >= -x0/kx (since kx > 0 when b > 0).
    # For y >= 0:  y0 - k*ky >= 0   =>   k <= y0/ky   (since ky > 0 when a > 0).
    k_min = math.ceil(-x0 / kx)
    k_max = math.floor(y0 / ky)
    
    if k_min <= k_max:
        k = k_min
        return (x0 + k * kx, y0 - k * ky)
    else:
        # If no k yields a nonnegative solution, return the particular solution.
        return (x0, y0)
        
# The assertion:
# assert find_solution(2, 3, 7) == (2, 1)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 6:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        g, x, y = extended_gcd(b, a % b)
        return g, y, x - (a // b) * y
    g, x0, y0 = extended_gcd(a, b)
    if n % g != 0:
        return None
    factor = n // g
    # a particular solution (possibly with negative values)
    x0 *= factor
    y0 *= factor
    # adjust the solution so that x and y become nonnegative
    # the general solution is: x = x0 + (b/g)*t, y = y0 - (a/g)*t
    k = b // g
    m = a // g
    from math import ceil, floor
    # Find t such that x >= 0 and y >= 0.
    t_min = ceil(-x0 / k)
    t_max = floor(y0 / m)
    if t_min > t_max:
        return None
    t = t_min
    return (x0 + k * t, y0 - m * t)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 7:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        gcd, x1, y1 = extended_gcd(b, a % b)
        return gcd, y1, x1 - (a // b) * y1

    gcd, x, y = extended_gcd(a, b)
    if n % gcd != 0:
        return None
    factor = n // gcd
    return x * factor, y * factor
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 8:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    import math

    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        g, x, y = extended_gcd(b, a % b)
        return g, y, x - (a // b) * y

    # Check if any solution exists.
    d = abs(math.gcd(a, b))
    if n % d != 0:
        return None

    g, xg, yg = extended_gcd(a, b)
    factor = n // d
    x0 = xg * factor
    y0 = yg * factor

    # Write a and b in reduced form.
    A = a // d
    B = b // d

    # We look for an integer t such that:
    #   x = x0 + B*t >= 0   and   y = y0 - A*t >= 0
    t_low = -float("inf")
    t_high = float("inf")

    # Constraint from x >= 0:  x0 + B*t >= 0  => t >= -x0/B if B > 0 else t <= -x0/B
    if B:
        if B > 0:
            t_low = max(t_low, math.ceil(-x0 / B))
        else:  # B < 0
            t_high = min(t_high, math.floor(-x0 / B))
    else:
        if x0 < 0:
            return None

    # Constraint from y >= 0:  y0 - A*t >= 0  => t <= y0/A if A > 0 else t >= y0/A
    if A:
        if A > 0:
            t_high = min(t_high, math.floor(y0 / A))
        else:  # A < 0
            t_low = max(t_low, math.ceil(y0 / A))
    else:
        if y0 < 0:
            return None

    if t_low > t_high:
        return None

    t = t_low
    return (x0 + B * t, y0 - A * t)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 9:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
import math

def find_solution(a, b, n):
    # Handle special cases when one or both coefficients are zero.
    if a == 0 and b == 0:
        return (0, 0) if n == 0 else None
    if a == 0:
        if b != 0 and n % b == 0:
            y = n // b
            return (0, y)
        return None
    if b == 0:
        if a != 0 and n % a == 0:
            x = n // a
            return (x, 0)
        return None

    # Compute gcd and check for solvability.
    d = math.gcd(a, b)
    if n % d != 0:
        return None

    # Extended Euclidean algorithm: returns (g, x, y) where ax+by=g.
    def extended_gcd(x, y):
        if y == 0:
            return (x, 1, 0)
        g, s, t = extended_gcd(y, x % y)
        return (g, t, s - (x // y) * t)

    g, x0, y0 = extended_gcd(a, b)
    factor = n // d
    # Base particular solution for a*x + b*y = n.
    x_base = x0 * factor
    y_base = y0 * factor

    # General solution: x = x_base + k*(b/d), y = y_base - k*(a/d)
    step_x = b // d
    step_y = a // d

    # Adjust k to obtain a solution with x and y both nonnegative.
    # For x >= 0: k >= -x_base/step_x  (if step_x > 0)
    # For y >= 0: k <= y_base/step_y   (if step_y > 0)
    if step_x > 0:
        k_min = math.ceil(-x_base / step_x)
    else:
        k_min = math.floor(-x_base / step_x)
    if step_y > 0:
        k_max = math.floor(y_base / step_y)
    else:
        k_max = math.ceil(y_base / step_y)

    # If there exists an integer k such that k_min <= k <= k_max, choose the smallest such k.
    if k_min <= k_max:
        k = k_min
        return (x_base + k * step_x, y_base - k * step_y)
    # If no nonnegative solution exists, return the base solution.
    return (x_base, y_base)
[/PYTHON]
================================================================================

Prompt 88, Sample Number: 10:
Model input: """
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
"""
Response:
 [PYTHON]
def find_solution(a, b, n):
    def extended_gcd(a, b):
        if b == 0:
            return a, 1, 0
        g, x1, y1 = extended_gcd(b, a % b)
        return g, y1, x1 - (a // b) * y1

    # Handle special cases where one of a or b is 0.
    if a == 0 and b == 0:
        return (0, 0) if n == 0 else None
    if a == 0:
        if b != 0 and n % b == 0:
            return (0, n // b)
        else:
            return None
    if b == 0:
        if a != 0 and n % a == 0:
            return (n // a, 0)
        else:
            return None

    g, x0, y0 = extended_gcd(a, b)
    if n % g != 0:
        return None

    factor = n // g
    x0 *= factor
    y0 *= factor

    # General solution is: x = x0 + k*(b/g), y = y0 - k*(a/g)
    # We choose k such that x is the smallest nonnegative integer.
    shift = b // g
    if shift != 0:
        import math
        if shift > 0:
            k = math.ceil(-x0 / shift)
        else:
            k = -math.floor(x0 / -shift)
        x0 += k * shift
        y0 -= k * (a // g)

    return (x0, y0)
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 1:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, elements):
    return [item for item in lst if item not in elements]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 2:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, elements):
    return [item for item in lst if item not in elements]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 3:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, to_remove):
    remove_set = set(to_remove)
    return [x for x in lst if x not in remove_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 4:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(source, remove):
    remove_set = set(remove)
    return [x for x in source if x not in remove_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 5:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, elements):
    elements_set = set(elements)
    return [x for x in lst if x not in elements_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 6:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, elements):
    return [x for x in lst if x not in elements]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 7:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, elements):
    elements_set = set(elements)
    return [item for item in lst if item not in elements_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 8:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, to_remove):
    remove_set = set(to_remove)
    return [item for item in lst if item not in remove_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 9:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, to_remove):
    to_remove_set = set(to_remove)
    return [item for item in lst if item not in to_remove_set]
[/PYTHON]
================================================================================

Prompt 89, Sample Number: 10:
Model input: """
Write a function to remove all elements from a given list present in another list.
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]
"""
Response:
 [PYTHON]
def remove_elements(lst, to_remove):
    return [x for x in lst if x not in to_remove]
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 1:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    i = 0
    while n - 2 * i > 0:
        total += n - 2 * i
        i += 1
    return total
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 2:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    for i in range(n // 2 + 1):
        term = n - 2 * i
        if term > 0:
            total += term
    return total
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 3:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    return sum(n - 2 * i for i in range(n // 2 + 1))
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 4:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    for i in range(n // 2 + 1):
        term = n - 2 * i
        if term <= 0:
            break
        total += term
    return total
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 5:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    return sum(n - 2 * i for i in range(n // 2 + 1))
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 6:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    for i in range(n // 2 + 1):
        total += n - 2 * i
    return total
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 7:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    for i in range(n // 2 + 1):
        total += n - 2 * i
    return total
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 8:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    return sum(n - 2 * i for i in range(n // 2 + 1))
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 9:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    return sum(n - 2 * i for i in range(n // 2 + 1))
[/PYTHON]
================================================================================

Prompt 90, Sample Number: 10:
Model input: """
Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).
assert sum_series(6) == 12
"""
Response:
 [PYTHON]
def sum_series(n):
    total = 0
    for i in range(n // 2 + 1):
        total += n - 2 * i
    return total
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 1:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    for i, ch in enumerate(s, start=1):
        if i <= 26 and ch.lower() == chr(ord('a') + i - 1):
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 2:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    for i, ch in enumerate(s):
        lower_ch = ch.lower()
        if 'a' <= lower_ch <= 'z':
            if (i + 1) == (ord(lower_ch) - ord('a') + 1):
                count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 3:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s: str) -> int:
    count = 0
    for idx, char in enumerate(s):
        if char.isalpha() and (ord(char.lower()) - ord('a') + 1) == idx + 1:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 4:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    s_lower = s.lower()
    for index, char in enumerate(s_lower, start=1):
        if 'a' <= char <= 'z' and (ord(char) - ord('a') + 1) == index:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 5:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s: str) -> int:
    alpha = "abcdefghijklmnopqrstuvwxyz"
    count = 0
    for i, char in enumerate(s):
        if i < 26 and char.lower() == alpha[i]:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 6:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    for idx, ch in enumerate(s, 1):
        ch_lower = ch.lower()
        if 'a' <= ch_lower <= 'z' and (ord(ch_lower) - ord('a') + 1) == idx:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 7:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s: str) -> int:
    count = 0
    for i, char in enumerate(s, start=1):
        if char.isalpha() and i == (ord(char.lower()) - ord('a') + 1):
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 8:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(txt):
    count = 0
    for pos, char in enumerate(txt.lower(), start=1):
        if 'a' <= char <= 'z' and (ord(char) - ord('a') + 1) == pos:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 9:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    for i, char in enumerate(s):
        if char.isalpha() and (ord(char.lower()) - ord('a') + 1) == i + 1:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 91, Sample Number: 10:
Model input: """
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position("xbcefg") == 2
"""
Response:
 [PYTHON]
def count_char_position(s):
    count = 0
    for i, ch in enumerate(s, start=1):
        if ch.isalpha() and ord(ch.lower()) - ord('a') + 1 == i:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 1:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    evens = sum(1 for x in lst if x % 2 == 0)
    odds = len(lst) - evens
    return evens * (evens - 1) // 2 + odds * (odds - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 2:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for x in lst if x % 2 == 0)
    odd_count = len(lst) - even_count
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 3:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(numbers):
    even_count = sum(1 for num in numbers if num % 2 == 0)
    odd_count = len(numbers) - even_count
    return (even_count * (even_count - 1)) // 2 + (odd_count * (odd_count - 1)) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 4:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for x in lst if x % 2 == 0)
    odd_count = len(lst) - even_count
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 5:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(numbers):
    even_count = 0
    odd_count = 0
    for num in numbers:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 6:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for x in lst if x % 2 == 0)
    odd_count = len(lst) - even_count
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 7:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for x in lst if x % 2 == 0)
    odd_count = len(lst) - even_count
    return (even_count * (even_count - 1)) // 2 + (odd_count * (odd_count - 1)) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 8:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for num in lst if num % 2 == 0)
    odd_count = len(lst) - even_count
    return (even_count * (even_count - 1)) // 2 + (odd_count * (odd_count - 1)) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 9:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for num in lst if num % 2 == 0)
    odd_count = len(lst) - even_count
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 92, Sample Number: 10:
Model input: """
Write a function that counts the number of pairs of integers in a list that xor to an even number.
assert find_even_pair([5, 4, 7, 2, 1]) == 4
"""
Response:
 [PYTHON]
def find_even_pair(lst):
    even_count = sum(1 for num in lst if num % 2 == 0)
    odd_count = len(lst) - even_count
    return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 1:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    power = 1
    while power < n:
        power *= 2
    return power
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 2:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    return 1 << ((n - 1).bit_length())
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 3:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n < 1:
        return 1
    return 2 ** ((n - 1).bit_length())
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 4:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n < 1:
        return 1
    power = 1
    while power < n:
        power *= 2
    return power
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 5:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    power = 1
    while power < n:
        power *= 2
    return power
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 6:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    return 1 << ((n - 1).bit_length())
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 7:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 0:
        return 1
    power = 1
    while power < n:
        power *= 2
    return power
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 8:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n < 1:
        return 1
    p = 1
    while p < n:
        p *= 2
    return p
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 9:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    if n & (n - 1) == 0:
        return n
    return 1 << n.bit_length()
[/PYTHON]
================================================================================

Prompt 93, Sample Number: 10:
Model input: """
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""
Response:
 [PYTHON]
def next_power_of_2(n):
    if n <= 1:
        return 1
    return 1 << ((n - 1).bit_length())
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 1:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 2:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 3:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 4:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, n):
    return lst.count(n)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 5:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 6:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 7:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 8:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 9:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, number):
    return lst.count(number)
[/PYTHON]
================================================================================

Prompt 94, Sample Number: 10:
Model input: """
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
"""
Response:
 [PYTHON]
def frequency(lst, num):
    return lst.count(num)
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 1:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 2:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 3:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 4:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 5:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(nums, start, end):
    return sum(nums[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 6:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 7:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 8:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 9:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 95, Sample Number: 10:
Model input: """
Write a function to find the sum of numbers in a list within a range specified by two indices.
assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29
"""
Response:
 [PYTHON]
def sum_range_list(lst, start, end):
    return sum(lst[start:end+1])
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 1:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side):
    return side * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 2:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side):
    return 5 * side
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 3:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side_length):
    return 5 * side_length
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 4:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side_length):
    return side_length * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 5:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side_length):
    return side_length * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 6:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side_length):
    return 5 * side_length
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 7:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side):
    return side * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 8:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side):
    return side * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 9:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(s):
    return s * 5
[/PYTHON]
================================================================================

Prompt 96, Sample Number: 10:
Model input: """
Write a function to find the perimeter of a regular pentagon from the length of its sides.
assert perimeter_pentagon(5) == 25
"""
Response:
 [PYTHON]
def perimeter_pentagon(side):
    return 5 * side
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 1:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 2:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 3:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 4:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 5:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count('std')
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 6:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 7:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 8:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s):
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 9:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s: str) -> int:
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 97, Sample Number: 10:
Model input: """
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance("letstdlenstdporstd") == 3
"""
Response:
 [PYTHON]
def count_occurance(s: str) -> int:
    return s.count("std")
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 1:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return len({type(x) for x in t}) == 1
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 2:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return len({type(el) for el in t}) == 1
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 3:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    if not t:
        return True
    first_type = type(t[0])
    for item in t:
        if type(item) != first_type:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 4:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    if not t:
        return True
    first_type = type(t[0])
    return all(type(item) == first_type for item in t)
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 5:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return all(type(x) == type(t[0]) for x in t)
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 6:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return len({type(x) for x in t}) == 1
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 7:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    if not t:
        return True
    first_type = type(t[0])
    return all(type(item) == first_type for item in t)
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 8:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return all(type(x) == type(t[0]) for x in t) if t else True
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 9:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    if not t:
        return True
    first_type = type(t[0])
    for element in t:
        if type(element) != first_type:
            return False
    return True
[/PYTHON]
================================================================================

Prompt 98, Sample Number: 10:
Model input: """
Write a function to check if all the elements in tuple have same data type or not.
assert check_type((5, 6, 7, 3, 5, 6) ) == True
"""
Response:
 [PYTHON]
def check_type(t):
    return len({type(item) for item in t}) == 1
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 1:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    import bisect
    left = bisect.bisect_left(arr, x)
    right = bisect.bisect_right(arr, x)
    return (right - left) > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 2:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, element):
    import bisect
    left = bisect.bisect_left(arr, element)
    right = bisect.bisect_right(arr, element)
    return right - left > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 3:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    from bisect import bisect_left, bisect_right
    left = bisect_left(arr, x)
    right = bisect_right(arr, x)
    return (right - left) > n / 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 4:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    left, right = 0, n - 1
    first_index = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == x:
            first_index = mid
            right = mid - 1
        elif arr[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    if first_index == -1:
        return False
    if first_index + n // 2 < n and arr[first_index + n // 2] == x:
        return True
    return False
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 5:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
import bisect

def is_majority(arr, n, x):
    left = bisect.bisect_left(arr, x)
    right = bisect.bisect_right(arr, x)
    return (right - left) > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 6:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    import bisect
    left = bisect.bisect_left(arr, x)
    right = bisect.bisect_right(arr, x)
    return (right - left) > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 7:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    import bisect
    left = bisect.bisect_left(arr, x)
    right = bisect.bisect_right(arr, x)
    return (right - left) > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 8:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, element):
    from bisect import bisect_left, bisect_right
    left = bisect_left(arr, element)
    right = bisect_right(arr, element)
    return (right - left) > n // 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 9:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, element):
    import bisect
    left = bisect.bisect_left(arr, element)
    right = bisect.bisect_right(arr, element)
    return (right - left) > n / 2
[/PYTHON]
================================================================================

Prompt 99, Sample Number: 10:
Model input: """
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
"""
Response:
 [PYTHON]
def is_majority(arr, n, x):
    import bisect
    left = bisect.bisect_left(arr, x)
    right = bisect.bisect_right(arr, x)
    return (right - left) > n / 2
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 1:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 2:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 3:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 4:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 5:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(num):
    return bin(num).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 6:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 7:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count("1")
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 8:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 9:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count('1')
[/PYTHON]
================================================================================

Prompt 100, Sample Number: 10:
Model input: """
Write a python function to count the number of set bits (binary digits with value 1) in a given number.
assert count_Set_Bits(2) == 1
"""
Response:
 [PYTHON]
def count_Set_Bits(n):
    return bin(n).count("1")
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 1:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[0::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 2:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 3:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 4:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s: str) -> str:
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 5:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 6:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 7:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s: str) -> str:
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 8:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 9:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s):
    return s[::2]
[/PYTHON]
================================================================================

Prompt 101, Sample Number: 10:
Model input: """
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
"""
Response:
 [PYTHON]
def odd_values_string(s: str) -> str:
    return s[::2]
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 1:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 2:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 3:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 4:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 5:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 6:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 7:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 8:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 9:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 102, Sample Number: 10:
Model input: """
Write a function to find minimum of three numbers.
assert min_of_three(10,20,0)==0
"""
Response:
 [PYTHON]
def min_of_three(a, b, c):
    return min(a, b, c)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 1:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(text, char):
    return text.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 2:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(s, char):
    return s.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 3:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(s, char):
    return s.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 4:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(string, char):
    return string.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 5:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(s, ch):
    return s.replace(" ", ch)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 6:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(s, character):
    return s.replace(" ", character)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 7:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(string, char):
    return string.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 8:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(text, char):
    return text.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 9:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(string, char):
    return string.replace(" ", char)
[/PYTHON]
================================================================================

Prompt 103, Sample Number: 10:
Model input: """
Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.
assert replace_blank("hello people",'@')==("hello@people")
"""
Response:
 [PYTHON]
def replace_blank(s, char):
    return s.replace(' ', char)
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 1:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 2:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 3:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 4:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 5:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 6:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 7:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 8:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 9:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 104, Sample Number: 10:
Model input: """
Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.
assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])
"""
Response:
 [PYTHON]
def larg_nnum(lst, n):
    return sorted(lst, reverse=True)[:n]
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 1:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 2:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 3:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 4:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(r, h):
    return 2 * math.pi * r * h
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 5:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(r, h):
    return 2 * math.pi * r * h
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 6:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(r, h):
    return 2 * math.pi * r * h
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 7:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 8:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
def lateralsuface_cylinder(radius, height):
    import math
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 9:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 105, Sample Number: 10:
Model input: """
Write a function to find the lateral surface area of a cylinder.
assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)
"""
Response:
 [PYTHON]
import math

def lateralsuface_cylinder(radius, height):
    return 2 * math.pi * radius * height
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 1:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 2:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 3:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 4:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 5:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 6:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 7:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 8:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 9:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 106, Sample Number: 10:
Model input: """
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
"""
Response:
 [PYTHON]
def volume_cube(side):
    return side ** 3
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 1:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bit_len = n.bit_length() or 1
    mask = 0
    for i in range(bit_len):
        if i % 2 == 1:
            mask |= 1 << i
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 2:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    length = n.bit_length() if n > 0 else 1
    mask = sum(1 << i for i in range(length) if i % 2 == 1)
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 3:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bits = n.bit_length() if n.bit_length() > 0 else 1
    mask = 0
    for i in range(1, bits + 1):
        if i % 2 == 0:
            mask |= (1 << (i - 1))
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 4:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    # Determine the number of bits needed to represent n.
    # Use at least one bit if n is 0.
    bit_length = n.bit_length() or 1
    # Create a mask with bits set in the even positions (positions 2,4,6,... when counting from 1),
    # which are the odd-index bits in 0-indexing.
    # 0xAAAAAAAA has 1s at bit positions 1,3,5,... in a 32‐bit word.
    mask = 0xAAAAAAAA & ((1 << bit_length) - 1)
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 5:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bit_length = n.bit_length() or 1
    mask = 0
    for i in range(2, bit_length + 1, 2):
        mask |= (1 << (i - 1))
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 6:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bits = n.bit_length() or 1
    mask = 0
    for i in range(bits):
        if (i + 1) % 2 == 0:
            mask |= (1 << i)
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 7:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bits = n.bit_length()
    mask = 0
    for i in range(bits):
        if i % 2 == 1:
            mask |= 1 << i
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 8:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bits = n.bit_length()
    mask = 0
    for i in range(bits):
        if i % 2 == 1:
            mask |= (1 << i)
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 9:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    bit_len = n.bit_length() or 1
    mask = 0
    for i in range(1, bit_len, 2):
        mask |= (1 << i)
    return n | mask
[/PYTHON]
================================================================================

Prompt 107, Sample Number: 10:
Model input: """
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
"""
Response:
 [PYTHON]
def even_bit_set_number(n):
    length = n.bit_length() if n else 1
    mask = 0
    for bit in range(length):
        if bit % 2 == 1:
            mask |= (1 << bit)
    return n | mask
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 1:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    counts = {}
    for tpl in tuples_list:
        key = tuple(sorted(tpl))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 2:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    occurences = {}
    for t in tuples_list:
        key = tuple(sorted(t))
        occurences[key] = occurences.get(key, 0) + 1
    return occurences
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 3:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    counts = {}
    for t in tuples_list:
        key = tuple(sorted(t))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 4:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    freq_dict = {}
    for tpl in tuples_list:
        sorted_tpl = tuple(sorted(tpl))
        freq_dict[sorted_tpl] = freq_dict.get(sorted_tpl, 0) + 1
    return freq_dict
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 5:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    count_dict = {}
    for t in tuples_list:
        key = tuple(sorted(t))
        count_dict[key] = count_dict.get(key, 0) + 1
    return count_dict
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 6:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(lst):
    counts = {}
    for t in lst:
        key = tuple(sorted(t))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 7:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    counts = {}
    for t in tuples_list:
        normalized = tuple(sorted(t))
        counts[normalized] = counts.get(normalized, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 8:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    counts = {}
    for tup in tuples_list:
        key = tuple(sorted(tup))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 9:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(tuples_list):
    counts = {}
    for t in tuples_list:
        key = tuple(sorted(t))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 108, Sample Number: 10:
Model input: """
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
"""
Response:
 [PYTHON]
def check_occurences(lst):
    counts = {}
    for t in lst:
        key = tuple(sorted(t))
        counts[key] = counts.get(key, 0) + 1
    return counts
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 1:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    n = len(s)
    return n * (n + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 2:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    return len(s) * (len(s) + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 3:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    n = len(s)
    return n * (n + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 4:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    return len(s) * (len(s) + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 5:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s: str) -> int:
    return len(s) * (len(s) + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 6:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s: str) -> int:
    n = len(s)
    return (n * (n + 1)) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 7:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    n = len(s)
    return n * (n + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 8:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    n = len(s)
    return n * (n + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 9:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    return len(s) * (len(s) + 1) // 2
[/PYTHON]
================================================================================

Prompt 109, Sample Number: 10:
Model input: """
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings("abc") == 6
"""
Response:
 [PYTHON]
def number_of_substrings(s):
    n = len(s)
    return n * (n + 1) // 2
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 1:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def count(prev, remaining):
        if remaining == 0:
            return 1
        total = 0
        for next_val in range(prev * 2, m + 1):
            total += count(next_val, remaining - 1)
        return total

    total_sequences = 0
    for first in range(1, m + 1):
        total_sequences += count(first, n - 1)
    return total_sequences
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 2:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def count(length, lower_bound):
        if lower_bound > m:
            return 0
        if length == 1:
            return m - lower_bound + 1
        total = 0
        for x in range(lower_bound, m + 1):
            total += count(length - 1, 2 * x)
        return total
    return count(n, 1)
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 3:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def rec(lower_bound, k):
        if k == 0:
            return 1
        count = 0
        for v in range(lower_bound, m + 1):
            count += rec(2 * v, k - 1)
        return count
    return rec(1, n)
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 4:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def count(x, length):
        if length == 1:
            return 1
        total = 0
        for y in range(2 * x, m + 1):
            total += count(y, length - 1)
        return total

    total_sequences = 0
    for x in range(1, m + 1):
        total_sequences += count(x, n)
    return total_sequences
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 5:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def count(start, remaining):
        if remaining == 1:
            return 1
        total = 0
        next_min = 2 * start
        for next_val in range(next_min, m + 1):
            total += count(next_val, remaining - 1)
        return total

    total_sequences = 0
    for initial in range(1, m + 1):
        total_sequences += count(initial, n)
    return total_sequences
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 6:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache
    @lru_cache(maxsize=None)
    def count_sequences(current, length):
        if length == 1:
            return 1
        total = 0
        for next_val in range(2 * current, m + 1):
            total += count_sequences(next_val, length - 1)
        return total

    total_sequences = 0
    for start in range(1, m + 1):
        total_sequences += count_sequences(start, n)
    return total_sequences
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 7:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def count(prev, rem):
        if rem == 0:
            return 1
        total = 0
        # Next term must be at least 2*prev.
        # For the very first element, when prev==0, we allow any starting integer.
        start = 1 if prev == 0 else 2 * prev
        for x in range(start, m + 1):
            total += count(x, rem - 1)
        return total

    return count(0, n)
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 8:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def f(x, length):
        if length == 1:
            return 1
        count = 0
        for y in range(2 * x, m + 1):
            count += f(y, length - 1)
        return count

    total = 0
    for start in range(1, m + 1):
        total += f(start, n)
    return total
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 9:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def count_sequences(current, remaining):
        if remaining == 1:
            return 1
        total = 0
        start = 2 * current
        if start > m:
            return 0
        for nxt in range(start, m + 1):
            total += count_sequences(nxt, remaining - 1)
        return total

    total_sequences = 0
    for start in range(1, m + 1):
        total_sequences += count_sequences(start, n)
    return total_sequences
[/PYTHON]
================================================================================

Prompt 110, Sample Number: 10:
Model input: """
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
"""
Response:
 [PYTHON]
def get_total_number_of_sequences(m, n):
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def rec(prev, length):
        if length == 1:
            return 1
        count = 0
        for num in range(2 * prev, m + 1):
            count += rec(num, length - 1)
        return count

    total = 0
    for start in range(1, m + 1):
        total += rec(start, n)
    return total
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 1:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(list1, list2):
    return list1[:-1] + list2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 2:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(lst1, lst2):
    return lst1[:-1] + lst2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 3:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(list1, list2):
    return list1[:-1] + list2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 4:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(lst1, lst2):
    return lst1[:-1] + lst2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 5:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(lst1, lst2):
    return lst1[:-1] + lst2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 6:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(lst1, lst2):
    return lst1[:-1] + lst2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 7:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(list1, list2):
    return list1[:-1] + list2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 8:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(list1, list2):
    return list1[:-1] + list2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 9:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(lst1, lst2):
    return lst1[:-1] + lst2
[/PYTHON]
================================================================================

Prompt 111, Sample Number: 10:
Model input: """
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
"""
Response:
 [PYTHON]
def replace_list(list1, list2):
    return list1[:-1] + list2
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 1:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 2:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 3:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(string):
    return len(string)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 4:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 5:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 6:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 7:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 8:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 9:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 112, Sample Number: 10:
Model input: """
Write a function to count the total number of characters in a string.
assert count_charac("python programming")==18
"""
Response:
 [PYTHON]
def count_charac(s):
    return len(s)
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 1:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
def next_Perfect_Square(n):
    import math
    return (int(math.sqrt(n)) + 1) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 2:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
def next_Perfect_Square(n):
    import math
    return (int(math.sqrt(n)) + 1) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 3:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    root = int(math.sqrt(n))
    if root * root == n:
        return (root + 1) ** 2
    else:
        return (root + 1) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 4:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    root = math.isqrt(n)
    if root * root == n:
        root += 1
    else:
        if root * root < n:
            root += 1
    return root * root
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 5:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
def next_Perfect_Square(n):
    import math
    return (int(math.sqrt(n)) + 1) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 6:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
def next_Perfect_Square(n):
    import math
    return (math.floor(math.sqrt(n)) + 1) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 7:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    x = math.sqrt(n)
    x_int = int(x)
    if x_int * x_int == n:
        return (x_int + 1) ** 2
    else:
        return math.ceil(x) ** 2
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 8:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    root = math.sqrt(n)
    int_root = int(root)
    if int_root * int_root == n:
        int_root += 1
    else:
        int_root = int(math.floor(root)) + 1
    return int_root * int_root
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 9:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    root = math.sqrt(n)
    next_int = int(root) + 1
    return next_int * next_int
[/PYTHON]
================================================================================

Prompt 113, Sample Number: 10:
Model input: """
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
"""
Response:
 [PYTHON]
import math

def next_Perfect_Square(n):
    k = int(math.sqrt(n))
    if k * k == n:
        return (k + 1) ** 2
    return (k + 1) ** 2
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 1:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    msis = arr[:]  # max sum increasing subsequence ending at i
    msds = arr[:]  # max sum decreasing subsequence starting at i

    # Calculate msis values
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i] and msis[j] + arr[i] > msis[i]:
                msis[i] = msis[j] + arr[i]

    # Calculate msds values (process in reverse)
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i] and msds[j] + arr[i] > msds[i]:
                msds[i] = msds[j] + arr[i]

    max_bitonic = 0
    for i in range(n):
        bitonic_sum = msis[i] + msds[i] - arr[i]
        if bitonic_sum > max_bitonic:
            max_bitonic = bitonic_sum

    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 2:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0
    inc = arr[:]  # inc[i] is the maximum sum of increasing subsequence ending at i
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:
                inc[i] = inc[j] + arr[i]
    dec = arr[:]  # dec[i] is the maximum sum of decreasing subsequence starting at i
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:
                dec[i] = dec[j] + arr[i]
    max_bitonic = 0
    for i in range(n):
        bitonic_sum = inc[i] + dec[i] - arr[i]
        if bitonic_sum > max_bitonic:
            max_bitonic = bitonic_sum
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 3:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0

    # dp_inc[i]: maximum sum of increasing subsequence ending at i
    dp_inc = arr.copy()
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i]:
                dp_inc[i] = max(dp_inc[i], dp_inc[j] + arr[i])
    
    # dp_dec[i]: maximum sum of decreasing subsequence starting at i
    dp_dec = arr.copy()
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])
    
    max_bitonic = 0
    for i in range(n):
        # subtract arr[i] because it is counted twice
        max_bitonic = max(max_bitonic, dp_inc[i] + dp_dec[i] - arr[i])
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 4:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Compute maximum sum increasing subsequence ending at each index
    lis = arr[:]  # best sum ending at index i (increasing)
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i] and lis[i] < lis[j] + arr[i]:
                lis[i] = lis[j] + arr[i]

    # Compute maximum sum decreasing subsequence starting at each index
    lds = arr[:]  # best sum starting at index i (decreasing)
    for i in range(n-1, -1, -1):
        for j in range(i+1, n):
            if arr[j] < arr[i] and lds[i] < lds[j] + arr[i]:
                lds[i] = lds[j] + arr[i]

    # Combine for bitonic: subtract the peak (i counted twice)
    max_bitonic = 0
    for i in range(n):
        max_bitonic = max(max_bitonic, lis[i] + lds[i] - arr[i])
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 5:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0
    inc = arr[:]  # Maximum sum increasing subsequence ending at each index
    dec = arr[:]  # Maximum sum decreasing subsequence starting at each index

    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:
                inc[i] = inc[j] + arr[i]

    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:
                dec[i] = dec[j] + arr[i]

    max_bitonic = 0
    for i in range(n):
        bitonic_sum = inc[i] + dec[i] - arr[i]
        if bitonic_sum > max_bitonic:
            max_bitonic = bitonic_sum

    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 6:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    inc = arr[:]  # maximum sum increasing subsequence ending at i
    dec = arr[:]  # maximum sum decreasing subsequence starting at i

    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i]:
                inc[i] = max(inc[i], inc[j] + arr[i])
    
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                dec[i] = max(dec[i], dec[j] + arr[i])
    
    max_bitonic = 0
    for i in range(n):
        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])
    
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 7:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0
    # Compute maximum sum increasing subsequence ending at each index
    inc = arr[:]  # copy arr to initialize sum as the element itself
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:
                inc[i] = inc[j] + arr[i]
    # Compute maximum sum decreasing subsequence starting at each index
    dec = arr[:]  # initialize similarly
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:
                dec[i] = dec[j] + arr[i]
    # Combine to get maximum sum bitonic subsequence
    max_bitonic = 0
    for i in range(n):
        # subtract arr[i] since it's counted in both sequences.
        current_sum = inc[i] + dec[i] - arr[i]
        if current_sum > max_bitonic:
            max_bitonic = current_sum
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 8:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0
    inc = arr[:]  # max sum increasing subsequence ending at i
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i]:
                inc[i] = max(inc[i], inc[j] + arr[i])
    dec = arr[:]  # max sum decreasing subsequence starting at i
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                dec[i] = max(dec[i], dec[j] + arr[i])
    max_sum_bitonic = 0
    for i in range(n):
        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])
    return max_sum_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 9:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0

    dp_inc = arr[:]  # maximum sum increasing subsequence ending at each index
    for i in range(n):
        for j in range(i):
            if arr[j] < arr[i]:
                dp_inc[i] = max(dp_inc[i], dp_inc[j] + arr[i])

    dp_dec = arr[:]  # maximum sum decreasing subsequence starting at each index
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])

    max_bitonic = 0
    for i in range(n):
        max_bitonic = max(max_bitonic, dp_inc[i] + dp_dec[i] - arr[i])
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 114, Sample Number: 10:
Model input: """
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
"""
Response:
 [PYTHON]
def max_sum(arr):
    n = len(arr)
    if n == 0:
        return 0

    # dp_inc[i] stores the maximum sum of increasing subsequence ending at index i
    dp_inc = arr[:]  # initialize with the element itself

    for i in range(1, n):
        for j in range(i):
            if arr[j] < arr[i]:
                dp_inc[i] = max(dp_inc[i], dp_inc[j] + arr[i])
    
    # dp_dec[i] stores the maximum sum of decreasing subsequence starting at index i
    dp_dec = arr[:]  # initialize with the element itself

    for i in range(n-2, -1, -1):
        for j in range(i+1, n):
            if arr[j] < arr[i]:
                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])
    
    max_bitonic = 0
    for i in range(n):
        # subtract arr[i] because it is counted twice (as end and start)
        max_bitonic = max(max_bitonic, dp_inc[i] + dp_dec[i] - arr[i])
    
    return max_bitonic
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 1:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s):
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for cl in range(2, n + 1):
        for i in range(n - cl + 1):
            j = i + cl - 1
            if s[i] == s[j]:
                dp[i][j] = 2 if cl == 2 else dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 2:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s: str) -> int:
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for cl in range(2, n + 1):
        for i in range(n - cl + 1):
            j = i + cl - 1
            if s[i] == s[j]:
                dp[i][j] = 2 if cl == 2 else dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 3:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s: str) -> int:
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for i in range(n - 2, -1, -1):
        for j in range(i + 1, n):
            if s[i] == s[j]:
                if j == i + 1:
                    dp[i][j] = 2
                else:
                    dp[i][j] = dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 4:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s):
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j]:
                dp[i][j] = dp[i + 1][j - 1] + 2 if length > 2 else 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 5:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s: str) -> int:
    n = len(s)
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j]:
                dp[i][j] = 2 + (dp[i + 1][j - 1] if length > 2 else 0)
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 6:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s: str) -> int:
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for cl in range(2, n + 1):
        for i in range(n - cl + 1):
            j = i + cl - 1
            if s[i] == s[j]:
                dp[i][j] = 2 + (dp[i+1][j-1] if cl > 2 else 0)
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    return dp[0][n-1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 7:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s):
    n = len(s)
    if n == 0:
        return 0
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            if s[i] == s[j]:
                dp[i][j] = (dp[i + 1][j - 1] + 2) if j - i > 1 else 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 8:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s: str) -> int:
    n = len(s)
    if n == 0:
        return 0
    # dp[i][j] will hold the length of the longest palindromic subsequence in s[i:j+1]
    dp = [[0] * n for _ in range(n)]
    
    # every single character is a palindrome of length 1
    for i in range(n):
        dp[i][i] = 1
        
    # build the table. Consider substrings of length 2 to n.
    for cl in range(2, n + 1):
        for i in range(n - cl + 1):
            j = i + cl - 1
            if s[i] == s[j]:
                if cl == 2:
                    dp[i][j] = 2
                else:
                    dp[i][j] = dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    
    return dp[0][n - 1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 9:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for cl in range(2, n + 1):
        for i in range(n - cl + 1):
            j = i + cl - 1
            if s[i] == s[j]:
                if cl == 2:
                    dp[i][j] = 2
                else:
                    dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    return dp[0][n-1]
[/PYTHON]
================================================================================

Prompt 115, Sample Number: 10:
Model input: """
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps("TENS FOR TENS") == 5
"""
Response:
 [PYTHON]
def lps(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]
    # every single char is palindrome of length 1
    for i in range(n):
        dp[i][i] = 1

    # fill the table
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j]:
                if length == 2:
                    dp[i][j] = 2
                else:
                    dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    return dp[0][n-1]
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 1:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tup, element):
    count = 0
    for item in tup:
        if item == element:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 2:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tup, element):
    return tup.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 3:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(input_tuple, element):
    return input_tuple.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 4:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tup, element):
    return tup.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 5:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tup, elem):
    return tup.count(elem)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 6:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tpl, element):
    return tpl.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 7:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tpl, element):
    return tpl.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 8:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(t, element):
    return t.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 9:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(tup, element):
    return tup.count(element)
[/PYTHON]
================================================================================

Prompt 116, Sample Number: 10:
Model input: """
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
"""
Response:
 [PYTHON]
def count_X(t, x):
    return t.count(x)
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 1:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 2:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 3:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 4:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 5:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 6:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 7:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 8:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    return [x for item in lst for x in (element, item)]
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 9:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 117, Sample Number: 10:
Model input: """
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
"""
Response:
 [PYTHON]
def insert_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 1:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(z):
    return (abs(z), math.atan2(z.imag, z.real))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 2:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
def convert(z):
    import cmath
    return cmath.polar(z)
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 3:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(c):
    r = abs(c)
    theta = math.atan2(c.imag, c.real)
    return (r, theta)
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 4:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
def convert(z):
    import cmath
    return (abs(z), cmath.phase(z))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 5:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(c):
    return (abs(c), math.atan2(c.imag, c.real))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 6:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
def convert(n):
    import cmath
    return cmath.polar(n)
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 7:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(z):
    z = complex(z)
    return (abs(z), math.atan2(z.imag, z.real))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 8:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(z):
    return (abs(z), math.atan2(z.imag, z.real))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 9:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(z):
    return (abs(z), math.atan2(z.imag, z.real))
[/PYTHON]
================================================================================

Prompt 118, Sample Number: 10:
Model input: """
Write a python function to convert complex numbers to polar coordinates.
assert convert(1) == (1.0, 0.0)
"""
Response:
 [PYTHON]
import math

def convert(num):
    return (abs(num), math.atan2(num.imag, num.real))
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 1:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for x in lst if type(x) == int)
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 2:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 3:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if isinstance(item, int))
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 4:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    count = 0
    for item in lst:
        if type(item) is int:
            count += 1
    return count
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 5:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if type(item) is int)
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 6:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if type(item) == int)
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 7:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if isinstance(item, int))
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 8:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if isinstance(item, int))
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 9:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for x in lst if type(x) == int)
[/PYTHON]
================================================================================

Prompt 119, Sample Number: 10:
Model input: """
Write a python function that returns the number of integer elements in a given list.
assert count_integer([1,2,'abc',1.2]) == 2
"""
Response:
 [PYTHON]
def count_integer(lst):
    return sum(1 for item in lst if isinstance(item, int))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 1:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import combinations_with_replacement
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 2:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import combinations_with_replacement
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 3:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
import itertools

def combinations_colors(lst, n):
    return list(itertools.product(lst, repeat=n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 4:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import combinations_with_replacement
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 5:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
from itertools import combinations_with_replacement

def combinations_colors(lst, n):
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 6:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
import itertools

def combinations_colors(lst, n):
    return list(itertools.product(lst, repeat=n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 7:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import product
    return list(product(lst, repeat=n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 8:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import combinations_with_replacement
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 9:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import combinations_with_replacement
    return list(combinations_with_replacement(lst, n))
[/PYTHON]
================================================================================

Prompt 120, Sample Number: 10:
Model input: """
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
"""
Response:
 [PYTHON]
def combinations_colors(lst, n):
    from itertools import product
    return list(product(lst, repeat=n))
[/PYTHON]
================================================================================

Prompt 121, Sample Number: 1:
Model input: """
Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.
assert count_Primes_nums(5) == 2
"""
Response:
 [PYTHON]
def count_Primes_nums(n):
    if n < 2:
        return 0
    sieve = [True] * n
    sieve[0] = sieve[1] = False
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            for j in range(i * i, n, i):
                sieve[j] = False
    return sum(sieve)
[/PYTHON]
================================================================================

Prompt 121, Sample Number: 2:
Model input: """
Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.
assert count_Primes_nums(5) == 2
"""
Response:
 [PYTHON]
def count_Primes_nums(n):
    if n < 2:
        return 0
    sieve = [True] * n
    sieve[0] = sieve[1] = False
    p = 2
    while p * p < n:
        if sieve[p]:
            for i in range(p*p, n, p):
                sieve[i] = False
        p += 1
    return sum(sieve)
[/PYTHON]
================================================================================

Prompt 121, Sample Number: 3:
Model input: """
Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.
assert count_Primes_nums(5) == 2
"""
Response:
 [PYTHON]
def count_Primes_nums(n):
    if n < 2:
        return 0
    sieve = [True] * n
    sieve[0] = sieve[1] = False
    for i in range(2, int(n ** 0.5) + 1):
        if sieve[i]:
            sieve[i*i:n:i] = [False] * len(range(i*i, n, i))
    return sum(sieve)
[/PYTHON]
================================================================================

Prompt 121, Sample Number: 4:
Model input: """
Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.
assert count_Primes_nums(5) == 2
"""
Response:
 [PYTHON]
def count_Primes_nums(n):
    if n < 2:
        return 0
    sieve = [True] * n
    sieve[0] = sieve[1] = False
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            for j in range(i*i, n, i):
                sieve[j] = False
    return sum(sieve)
[/PYTHON]
================================================================================
